{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DWH-NonProd-ADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/SQLtableGeneric_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLdbConnection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tigermoth_DB_jao_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Tigermoth_LS",
					"type": "LinkedServiceReference",
					"parameters": {
						"dbname": {
							"value": "@dataset().dbname",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"dbname": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tigermoth_parameter_sourcelandingraw_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobStore_nfdwhstaging",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@{item().TargetFileName_param}",
							"type": "Expression"
						},
						"container": "sourcelandingraw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tigermoth_parameter_sourcelandingscrubbed_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobStore_nfdwhstaging",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@{item().TARGET_BLOB_NAME}",
							"type": "Expression"
						},
						"container": "sourcelandingscrubbed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Version",
						"type": "String"
					},
					{
						"name": "Fund",
						"type": "String"
					},
					{
						"name": "Asset",
						"type": "String"
					},
					{
						"name": "DescriptionYear",
						"type": "String"
					},
					{
						"name": "YearOffset",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tigermoth_spFSOPConsolidated_sourcelandingraw_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobStore_nfdwhstaging",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@{item().TargetFileName_spFSOPConsolidated}",
							"type": "Expression"
						},
						"container": "sourcelandingraw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tigermoth_spFSOPConsolidated_sourcelandingscrubbed_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobStore_nfdwhstaging",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@{item().TARGET_BLOB_NAME}",
							"type": "Expression"
						},
						"container": "sourcelandingscrubbed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Version",
						"type": "String"
					},
					{
						"name": "Fund",
						"type": "String"
					},
					{
						"name": "Asset",
						"type": "String"
					},
					{
						"name": "Period",
						"type": "String"
					},
					{
						"name": "PlunitID",
						"type": "String"
					},
					{
						"name": "Plunit",
						"type": "String"
					},
					{
						"name": "OriginID",
						"type": "String"
					},
					{
						"name": "Origin",
						"type": "String"
					},
					{
						"name": "SpeciesID",
						"type": "String"
					},
					{
						"name": "Species",
						"type": "String"
					},
					{
						"name": "Type",
						"type": "String"
					},
					{
						"name": "Operation",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Age",
						"type": "String"
					},
					{
						"name": "ProductID",
						"type": "String"
					},
					{
						"name": "Product",
						"type": "String"
					},
					{
						"name": "DestinationID",
						"type": "String"
					},
					{
						"name": "Destination",
						"type": "String"
					},
					{
						"name": "Category",
						"type": "String"
					},
					{
						"name": "Proportion",
						"type": "String"
					},
					{
						"name": "Area",
						"type": "String"
					},
					{
						"name": "CurrentArea",
						"type": "String"
					},
					{
						"name": "Quantity",
						"type": "String"
					},
					{
						"name": "Application",
						"type": "String"
					},
					{
						"name": "Perpetual",
						"type": "String"
					},
					{
						"name": "Current",
						"type": "String"
					},
					{
						"name": "Future",
						"type": "String"
					},
					{
						"name": "SharePerpetual",
						"type": "String"
					},
					{
						"name": "ShareCurrent",
						"type": "String"
					},
					{
						"name": "ShareFuture",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tigermoth_spFSOPEstate_sourcelandingraw_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobStore_nfdwhstaging",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@{item().TargetFileName_spFSOPEstate}",
							"type": "Expression"
						},
						"container": "sourcelandingraw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tigermoth_spFSOPOther_sourcelandingraw_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobStore_nfdwhstaging",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@{item().TargetFileName_spFSOPOther}",
							"type": "Expression"
						},
						"container": "sourcelandingraw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tigermoth_spFSOPOther_sourcelandingscrubbed_ds')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "BlobStore_nfdwhstaging",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@{item().TARGET_BLOB_NAME}",
							"type": "Expression"
						},
						"container": "sourcelandingscrubbed"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Version",
						"type": "String"
					},
					{
						"name": "Fund",
						"type": "String"
					},
					{
						"name": "Asset",
						"type": "String"
					},
					{
						"name": "Period",
						"type": "String"
					},
					{
						"name": "PlunitID",
						"type": "String"
					},
					{
						"name": "Plunit",
						"type": "String"
					},
					{
						"name": "OriginID",
						"type": "String"
					},
					{
						"name": "Origin",
						"type": "String"
					},
					{
						"name": "SpeciesID",
						"type": "String"
					},
					{
						"name": "Species",
						"type": "String"
					},
					{
						"name": "Product",
						"type": "String"
					},
					{
						"name": "Type",
						"type": "String"
					},
					{
						"name": "Entity",
						"type": "String"
					},
					{
						"name": "Event",
						"type": "String"
					},
					{
						"name": "UOA",
						"type": "String"
					},
					{
						"name": "Offset",
						"type": "String"
					},
					{
						"name": "Current",
						"type": "String"
					},
					{
						"name": "Future",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/relationalCOA_Views')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLdbConnection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "GL_Code",
						"type": "nvarchar"
					},
					{
						"name": "GL_Desc",
						"type": "nvarchar"
					},
					{
						"name": "View_Name",
						"type": "nvarchar"
					},
					{
						"name": "Category",
						"type": "nvarchar"
					},
					{
						"name": "process_name",
						"type": "nvarchar"
					},
					{
						"name": "Sub_Category",
						"type": "nvarchar"
					},
					{
						"name": "Item",
						"type": "nvarchar"
					},
					{
						"name": "Category_Index",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Sub_Category_Index",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Item_Index",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CF_Code",
						"type": "nvarchar"
					},
					{
						"name": "CF_Description",
						"type": "nvarchar"
					},
					{
						"name": "CPM_Code",
						"type": "nvarchar"
					},
					{
						"name": "CPM_Description",
						"type": "nvarchar"
					},
					{
						"name": "update_datetime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "update_user",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "relational",
					"table": "COA_Views"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/testJson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQLdbConnection",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "asset_id",
						"type": "nvarchar"
					},
					{
						"name": "fund_id",
						"type": "nvarchar"
					},
					{
						"name": "loc_geometry",
						"type": "NFDWHDEV.sys.geometry"
					},
					{
						"name": "loc_json",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "weiyin",
					"table": "testjson"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/MasterPipelineSendMail_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckFilesProcessingStatus",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) as UTC_TAG_COUNT FROM log.source_register_table\nWHERE ETL_UTC_TAG > '@{pipeline().parameters.Master_Utc_Tag}'\nAND (ETL_IS_PROCESSED = 'N' AND ETL_RUN_STATUS IS NOT NULL)\n;",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLsourceRegisterTable_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SendMasterMail",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckFilesProcessingStatus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('CheckFilesProcessingStatus').output.firstRow.UTC_TAG_COUNT,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SendMasterSuccessMail",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "UpdateMasterRunLog_Success",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-12.australiaeast.logic.azure.com:443/workflows/f7a9fbbc810043f28c16fd6bcf3b2f68/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8yphnNtSS85GDIgCI8OiOwpDghciKo7S9hRjuy5ITI4",
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"dataFactoryName": "@pipeline().parameters.Parent_DataFactory",
											"pipelineName": "@pipeline().parameters.Parent_Pipeline",
											"messageHeader": "***MASTER PIPELINE SUCCESS***",
											"messageProcessed": "Pipelines completed successfully",
											"messageNotProcessed": "",
											"messageErrorDuringProcess": ""
										}
									}
								},
								{
									"name": "UpdateMasterRunLog_Success",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[log].[UpdateMasterRunLog]",
										"storedProcedureParameters": {
											"MasterUtcTag": {
												"value": {
													"value": "@pipeline().parameters.Master_Utc_Tag",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunMessage": {
												"value": {
													"value": "@pipeline().parameters.Run_Message_Success",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunStatus": {
												"value": "SUCCESS",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SQLdbConnection",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "GetErrorFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "UpdateMasterRunLog_OverallFailed",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and etl_run_status is not null\n\t\t\t   and etl_utc_tag > '@{pipeline().parameters.Master_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as ErrorDuringProcess_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "SendMasterErrorMail",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "GetErrorFiles",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-12.australiaeast.logic.azure.com:443/workflows/f7a9fbbc810043f28c16fd6bcf3b2f68/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8yphnNtSS85GDIgCI8OiOwpDghciKo7S9hRjuy5ITI4",
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"dataFactoryName": "@pipeline().parameters.Parent_DataFactory",
											"pipelineName": "@pipeline().parameters.Parent_Pipeline",
											"messageHeader": "!!!MASTER PIPELINE FAILED!!!",
											"messageProcessed": "",
											"messageNotProcessed": "",
											"messageErrorDuringProcess": "@activity('GetErrorFiles').output.firstRow"
										}
									}
								},
								{
									"name": "UpdateMasterRunLog_OverallFailed",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[log].[UpdateMasterRunLog]",
										"storedProcedureParameters": {
											"MasterUtcTag": {
												"value": {
													"value": "@pipeline().parameters.Master_Utc_Tag",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunMessage": {
												"value": {
													"value": "@pipeline().parameters.Run_Message_Fail",
													"type": "Expression"
												},
												"type": "String"
											},
											"RunStatus": {
												"value": "FAILED",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SQLdbConnection",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Parent_DataFactory": {
						"type": "string"
					},
					"Parent_Pipeline": {
						"type": "string"
					},
					"Master_Utc_Tag": {
						"type": "string"
					},
					"Run_Message_Success": {
						"type": "string"
					},
					"Run_Message_Fail": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-08-28T02:28:08Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineCleanupContainer_raw_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Move files from one folder to another folder",
				"activities": [
					{
						"name": "GetFileList",
						"description": "Get the list of file",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryDataBlobSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "ForEachFile",
						"description": "Iterate each file, and move them one by one.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FilterFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FilterFiles').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "LookupSourceRegisterTable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('LookupSourceRegisterTable').output.firstRow.TOTREC,0)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "DeleteInvalidRawFile",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "CopyToFileshareErrorDump",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "BinaryDataBlobSourceLandingRaw_ds",
														"type": "DatasetReference",
														"parameters": {}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false,
														"wildcardFileName": {
															"value": "@{item().name}",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "CopyToFileshareErrorDump",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": true,
															"wildcardFileName": {
																"value": "@{item().name}",
																"type": "Expression"
															}
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "FileServerWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "BinaryDataBlobSourceLandingRaw_ds",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "BinaryDataSoureFileShareErrorDump_ds",
														"type": "DatasetReference",
														"parameters": {}
													}
												]
											}
										]
									}
								},
								{
									"name": "LookupSourceRegisterTable",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT COUNT(*) AS TOTREC\n  FROM [log].[Source_Register_Table]\n  WHERE [ORIGINAL_BLOB_NAME] = '@{item().name}'\n  AND [ETL_IS_PROCESSED] = 'N'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					},
					{
						"name": "FilterFiles",
						"description": "Only files will be selected, the source-folders will not be selected.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GetFileList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFileList').output.childitems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type, 'File')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2020-08-28T02:28:09Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineCleanupContainer_scrubbed_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupSoureRegisterTableError",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT ORIGINAL_BLOB_NAME AS TARGET_BLOB_NAME \nFROM LOG.SOURCE_REGISTER_TABLE \nWHERE ETL_IS_PROCESSED = 'E'\nAND DATEDIFF(DAY,INSERT_TIMESTAMP,CONVERT(smalldatetime,CONVERT(datetimeoffset, SYSDATETIME()) AT TIME ZONE 'AUS Eastern Standard Time')) < 8",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLsourceRegisterTable_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachSourceRegisterTableError",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LookupSoureRegisterTableError",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LookupSoureRegisterTableError').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "GetFileNameFromScrubbed",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DelimitedText_sourcelandingscrubbed_ds",
											"type": "DatasetReference",
											"parameters": {}
										},
										"fieldList": [
											"itemName",
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "IsFileExist",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "GetFileNameFromScrubbed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('GetFileNameFromScrubbed').output.exists",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "DeleteScrubbedFile",
												"type": "Delete",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DelimitedText_sourcelandingscrubbed_ds",
														"type": "DatasetReference",
														"parameters": {}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"myVAR": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-08-28T02:28:08Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineCopyFailedBlobToFileshare_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Move files from one folder to another folder",
				"activities": [
					{
						"name": "GetFileList",
						"description": "Get the list of file",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryDataBlobSourceLandingRaw_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "ForEachFile",
						"description": "Iterate each file, and move them one by one.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FilterFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FilterFiles').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CopyIfFileExist",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "LookupSourceRegisterTable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(activity('LookupSourceRegisterTable').output.firstRow.TOTREC,0)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "CopyBlobErrorFileToFileshare",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": false,
															"wildcardFileName": {
																"value": "@{item().name}",
																"type": "Expression"
															}
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "FileServerWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "BinaryDataBlobSourceLandingRaw_ds",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "BinaryDataSourceFileshareEtlError_ds",
														"type": "DatasetReference",
														"parameters": {}
													}
												]
											},
											{
												"name": "DeleteFailedBlob",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "CopyBlobErrorFileToFileshare",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "BinaryDataBlobSourceLandingRaw_ds",
														"type": "DatasetReference",
														"parameters": {}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": false,
														"wildcardFileName": {
															"value": "@{item().name}",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								},
								{
									"name": "LookupSourceRegisterTable",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT COUNT(*) AS TOTREC\n  FROM [log].[Source_Register_Table]\n  WHERE [ORIGINAL_BLOB_NAME] = '@{item().name}'\n  AND [ETL_IS_PROCESSED] = 'N' AND ETL_RUN_STATUS = 'FAILED'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								}
							]
						}
					},
					{
						"name": "FilterFiles",
						"description": "Only files will be selected, the source-folders will not be selected.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GetFileList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFileList').output.childitems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type, 'File')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2020-08-28T02:28:09Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineMoveFiles_fileshare_to_blob_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Move files from one folder to another folder",
				"activities": [
					{
						"name": "GetFileList",
						"description": "Get the list of file",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinaryDataSourceFileshareDirectory_MoveFile_ds",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "ForEachFile",
						"description": "Iterate each file, and move them one by one.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FilterFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FilterFiles').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CSVorGEOJSONfilesOnly",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@or(endswith(item().name,'.csv'), endswith(item().name,'.geojson') ) ",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "CopyFiromFilestoreToBlobstore",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "BinarySource",
														"storeSettings": {
															"type": "FileServerReadSettings",
															"recursive": false,
															"wildcardFileName": {
																"value": "@{item().name}",
																"type": "Expression"
															}
														}
													},
													"sink": {
														"type": "BinarySink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "BinaryDataSourceFileshareDirectory_MoveFile_ds",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "BinaryDataDestinationBlob_MoveFile_ds",
														"type": "DatasetReference",
														"parameters": {
															"filename": {
																"value": "@{item().name}",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "DeleteFromFilestore",
												"type": "Delete",
												"dependsOn": [
													{
														"activity": "CopyFiromFilestoreToBlobstore",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "BinaryDataSourceFileshareDirectory_MoveFile_ds",
														"type": "DatasetReference",
														"parameters": {}
													},
													"enableLogging": false,
													"storeSettings": {
														"type": "FileServerReadSettings",
														"recursive": false,
														"wildcardFileName": {
															"value": "@{item().name}",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "FilterFiles",
						"description": "Only files will be selected, the source-folders will not be selected.",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GetFileList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFileList').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().type, 'File')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2020-08-28T02:28:09Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineSendMail_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckReportableUtcTag",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) as UTC_TAG_COUNT FROM log.source_register_table\nWHERE etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n;",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLsourceRegisterTable_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckReportableUtcTag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('CheckReportableUtcTag').output.firstRow.UTC_TAG_COUNT,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "GetProcessedFiles",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'Y'\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Processed_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetNotProcessedFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GetProcessedFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and etl_utc_tag is null\n\t\t\t   and original_blob_name like '@{pipeline().parameters.File_Pattern}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Not_Processed_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetErrorDuringProcessFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GetNotProcessedFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and (etl_run_status like 'FAIL%' or etl_run_status like 'RUN%')\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as ErrorDuringProcess_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "SuccessOrFailMail",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "GetErrorDuringProcessFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-12.australiaeast.logic.azure.com:443/workflows/f7a9fbbc810043f28c16fd6bcf3b2f68/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8yphnNtSS85GDIgCI8OiOwpDghciKo7S9hRjuy5ITI4",
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"dataFactoryName": "@pipeline().parameters.Parent_DataFactory",
											"pipelineName": "@pipeline().parameters.Parent_Pipeline",
											"messageHeader": "@pipeline().parameters.Success_Fail_Header",
											"messageProcessed": "@activity('GetProcessedFiles').output.firstRow",
											"messageNotProcessed": "@activity('GetNotProcessedFiles').output.firstRow",
											"messageErrorDuringProcess": "@activity('GetErrorDuringProcessFiles').output.firstRow"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Parent_DataFactory": {
						"type": "string"
					},
					"Parent_Pipeline": {
						"type": "string"
					},
					"Success_Fail_Header": {
						"type": "string"
					},
					"Etl_Utc_Tag": {
						"type": "string"
					},
					"File_Pattern": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-08-28T02:28:08Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineSendMail_pl1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckReportableUtcTag",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) as UTC_TAG_COUNT FROM log.source_register_table\nWHERE etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n;",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLsourceRegisterTable_ds1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckReportableUtcTag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('CheckReportableUtcTag').output.firstRow.UTC_TAG_COUNT,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "GetProcessedFiles",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'Y'\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Processed_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds1",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetNotProcessedFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GetProcessedFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and etl_utc_tag is null\n\t\t\t   and original_blob_name like '@{pipeline().parameters.File_Pattern}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Not_Processed_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds1",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetErrorDuringProcessFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GetNotProcessedFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and (etl_run_status like 'FAIL%' or etl_run_status like 'RUN%')\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as ErrorDuringProcess_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds1",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "SuccessOrFailMail",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "GetErrorDuringProcessFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-12.australiaeast.logic.azure.com:443/workflows/f7a9fbbc810043f28c16fd6bcf3b2f68/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8yphnNtSS85GDIgCI8OiOwpDghciKo7S9hRjuy5ITI4",
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"dataFactoryName": "@pipeline().parameters.Parent_DataFactory",
											"pipelineName": "@pipeline().parameters.Parent_Pipeline",
											"messageHeader": "@pipeline().parameters.Success_Fail_Header",
											"messageProcessed": "@activity('GetProcessedFiles').output.firstRow",
											"messageNotProcessed": "@activity('GetNotProcessedFiles').output.firstRow",
											"messageErrorDuringProcess": "@activity('GetErrorDuringProcessFiles').output.firstRow"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Parent_DataFactory": {
						"type": "string"
					},
					"Parent_Pipeline": {
						"type": "string"
					},
					"Success_Fail_Header": {
						"type": "string"
					},
					"Etl_Utc_Tag": {
						"type": "string"
					},
					"File_Pattern": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-08-28T02:28:08Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineSendMail_pl2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckReportableUtcTag",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) as UTC_TAG_COUNT FROM log.source_register_table\nWHERE etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n;",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLsourceRegisterTable_ds2",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckReportableUtcTag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('CheckReportableUtcTag').output.firstRow.UTC_TAG_COUNT,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "GetProcessedFiles",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'Y'\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Processed_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds2",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetNotProcessedFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GetProcessedFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and etl_utc_tag is null\n\t\t\t   and original_blob_name like '@{pipeline().parameters.File_Pattern}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Not_Processed_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds2",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetErrorDuringProcessFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GetNotProcessedFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and (etl_run_status like 'FAIL%' or etl_run_status like 'RUN%')\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as ErrorDuringProcess_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds2",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "SuccessOrFailMail",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "GetErrorDuringProcessFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-12.australiaeast.logic.azure.com:443/workflows/f7a9fbbc810043f28c16fd6bcf3b2f68/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8yphnNtSS85GDIgCI8OiOwpDghciKo7S9hRjuy5ITI4",
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"dataFactoryName": "@pipeline().parameters.Parent_DataFactory",
											"pipelineName": "@pipeline().parameters.Parent_Pipeline",
											"messageHeader": "@pipeline().parameters.Success_Fail_Header",
											"messageProcessed": "@activity('GetProcessedFiles').output.firstRow",
											"messageNotProcessed": "@activity('GetNotProcessedFiles').output.firstRow",
											"messageErrorDuringProcess": "@activity('GetErrorDuringProcessFiles').output.firstRow"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Parent_DataFactory": {
						"type": "string"
					},
					"Parent_Pipeline": {
						"type": "string"
					},
					"Success_Fail_Header": {
						"type": "string"
					},
					"Etl_Utc_Tag": {
						"type": "string"
					},
					"File_Pattern": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-08-28T02:28:09Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PipelineSendMail_pl3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CheckReportableUtcTag",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) as UTC_TAG_COUNT FROM log.source_register_table\nWHERE etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n;",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLsourceRegisterTable_ds3",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "CheckReportableUtcTag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('CheckReportableUtcTag').output.firstRow.UTC_TAG_COUNT,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "GetProcessedFiles",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'Y'\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Processed_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds3",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetNotProcessedFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GetProcessedFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and etl_utc_tag is null\n\t\t\t   and original_blob_name like '@{pipeline().parameters.File_Pattern}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as Not_Processed_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds3",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "GetErrorDuringProcessFiles",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "GetNotProcessedFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "SELECT \n       stuff( (SELECT ', '+original_blob_name \n               FROM log.source_register_table\n\t\t\t   where etl_is_processed = 'N'\n\t\t\t   and (etl_run_status like 'FAIL%' or etl_run_status like 'RUN%')\n\t\t\t   and etl_utc_tag = '@{pipeline().parameters.Etl_Utc_Tag}'\n\t\t\t   order by original_blob_name\n               FOR XML PATH(''), TYPE).value('.', 'varchar(max)'),1,1,'') as ErrorDuringProcess_Files\n;",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "SQLsourceRegisterTable_ds3",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "SuccessOrFailMail",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "GetErrorDuringProcessFiles",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://prod-12.australiaeast.logic.azure.com:443/workflows/f7a9fbbc810043f28c16fd6bcf3b2f68/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=8yphnNtSS85GDIgCI8OiOwpDghciKo7S9hRjuy5ITI4",
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"body": {
											"dataFactoryName": "@pipeline().parameters.Parent_DataFactory",
											"pipelineName": "@pipeline().parameters.Parent_Pipeline",
											"messageHeader": "@pipeline().parameters.Success_Fail_Header",
											"messageProcessed": "@activity('GetProcessedFiles').output.firstRow",
											"messageNotProcessed": "@activity('GetNotProcessedFiles').output.firstRow",
											"messageErrorDuringProcess": "@activity('GetErrorDuringProcessFiles').output.firstRow"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Parent_DataFactory": {
						"type": "string"
					},
					"Parent_Pipeline": {
						"type": "string"
					},
					"Success_Fail_Header": {
						"type": "string"
					},
					"Etl_Utc_Tag": {
						"type": "string"
					},
					"File_Pattern": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-08-28T02:28:09Z"
			},
			"dependsOn": []
		}
	]
}