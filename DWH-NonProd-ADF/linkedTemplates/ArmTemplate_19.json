{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DWH-NonProd-ADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/LoadXlsxStrategicProjects_Step1_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetPersistentOpsWithTabParam_ds",
								"type": "DatasetReference"
							},
							"name": "SourceDataTab"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference"
							},
							"name": "RelationalStrategicProjectsLkp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParquetPersistentOps_ds",
								"type": "DatasetReference"
							},
							"name": "TargetPersistentParquetInsert"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGenericWithParam_ds",
								"type": "DatasetReference"
							},
							"name": "ErrorTable"
						},
						{
							"dataset": {
								"referenceName": "ParquetPersistentOps_ds",
								"type": "DatasetReference"
							},
							"name": "TargetPersistenParquetUpdate"
						}
					],
					"transformations": [
						{
							"name": "ValidateMandatoryColumns",
							"description": "ReportingDateCertificationIDValidateMsg is a test and should be considered as part of the conditional split Insert/Update activity"
						},
						{
							"name": "SegregateValidInvalidRows"
						},
						{
							"name": "SelectedColumnsOutputInsert"
						},
						{
							"name": "ConcatenateInvalidColumnsMessage"
						},
						{
							"name": "SelectedOutputColumnsError"
						},
						{
							"name": "GenerateRowNumber"
						},
						{
							"name": "DateTypeTransform"
						},
						{
							"name": "SplitInsertAndUpdate",
							"description": "1. The condition assume that the records from the current reporting period are deleted first if any (asset id, fund id, current reporting period)\n2. Records where reporting period equal current reporting period (disregard certification id) are inserted/reinserted after delete in 1\n3. Remaining records are not from current reporting period and the certification ids must not be null. These are updated"
						},
						{
							"name": "SelectColumnsOutputUpdate"
						},
						{
							"name": "UpdateDatetimeValue"
						},
						{
							"name": "SelectStrategicProjectsLkp"
						},
						{
							"name": "LookupStrategicProject"
						},
						{
							"name": "ExcludeFirstRow"
						}
					],
					"script": "parameters{\n\tMasterUtcTag as string,\n\tCurrentRunDateTime as string,\n\tWorkbookName as string,\n\tTabName as string,\n\tCurrentQuarterDate as string,\n\tMasterPipeline as string\n}\nsource(output(\n\t\tProject_ID as string,\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tReporting_Period as string,\n\t\tValidation_Flag as string,\n\t\tPrimary_Management_Activity as string,\n\t\tProject_Objectives as string,\n\t\tExpected_Value_Impact as string,\n\t\tDeliverable as string,\n\t\tDeliverable_Project_Weighting as string,\n\t\tDeliverable_Expected_Completion_Date as string,\n\t\tDeliverable_Planned_Completion_Date as string,\n\t\tCurrent_Progress_Percent_Complete as string,\n\t\tNotes as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tpartitionBy('hash', 1)) ~> SourceDataTab\nsource(output(\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tProject_ID as integer,\n\t\tReporting_Period as date,\n\t\tPrimary_Management_Activity as string,\n\t\tProject_Objectives as string,\n\t\tExpected_Value_Impact as string,\n\t\tDeliverable as string,\n\t\tProject_Weighting as short,\n\t\tExpected_Completion_Date as date,\n\t\tPlanned_Completion_Date as date,\n\t\tCurrent_Progress_Perc_Complete as short,\n\t\tInsert_Datetime as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT DISTINCT [Asset_ID]\\n      ,[Fund_ID]\\n      ,[Project_ID]\\n      ,[Reporting_Period]\\n      ,[Primary_Management_Activity]\\n      ,[Project_Objectives]\\n      ,[Expected_Value_Impact]\\n      ,[Deliverable]\\n      ,[Project_Weighting]\\n      ,[Expected_Completion_Date]\\n      ,[Planned_Completion_Date]\\n      ,[Current_Progress_Perc_Complete]\\n      ,[Insert_Datetime]\\n  FROM [relational].[OPS_Strategic_Project]',\n\tformat: 'query') ~> RelationalStrategicProjectsLkp\nLookupStrategicProject derive(AssetReportingDateValidateMsg = iif(isNull(Asset_ID) || isNull(Fund_ID) || isNull(Reporting_Period), \"Invalid Asset or Reporting Period/\", \"\"),\n\t\tReportingDateProjectIDValidateMsg = iif(iif(CurrentReportingPeriod != Reporting_Period, true(), false()) && isNull(Project_ID),\"Null Project ID for non-current Reporting Period/\",\"\"),\n\t\tLkpRelationalProjectIDValidateMsg = iif(not(isNull(Project_ID_Lkp)),\r\niif(equals(concat(Asset_ID_Lkp,Fund_ID_Lkp), concat(Asset_ID,Fund_ID)),\"\",\"Project ID not belong to Asset/\"),\"\"),\n\t\tPrimaryManageActivityValidateMsg = iif(isNull(Primary_Management_Activity), \"Primary Management Activity/\",\"\"),\n\t\tExpectedCompletionValidateMsg = iif(not(isNull(Deliverable_Expected_Completion_Date)),iif(not(isNull(Deliverable_Expected_Completion_Date_toDate)),\"\",\"Expected Completion Date/\"),\"Expected Completion Date/\"),\n\t\tPlannedCompletionValidateMsg = iif(not(isNull(Deliverable_Planned_Completion_Date)),iif(not(isNull(Deliverable_Planned_Completion_Date_toDate)),\"\",\"Planned Completion Date/\"),\"Planned Completion Date/\")) ~> ValidateMandatoryColumns\nValidateMandatoryColumns split(length(concatWS('',AssetReportingDateValidateMsg,\r\nLkpRelationalProjectIDValidateMsg,\r\nReportingDateProjectIDValidateMsg,\r\nPrimaryManageActivityValidateMsg, ExpectedCompletionValidateMsg, PlannedCompletionValidateMsg)) == 0,\n\tdisjoint: false) ~> SegregateValidInvalidRows@(ValidRows, InvalidRows)\nSplitInsertAndUpdate@Insert select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tPrimary_Management_Activity,\n\t\tProject_Objectives,\n\t\tExpected_Value_Impact,\n\t\tDeliverable,\n\t\tProject_Weighting,\n\t\tExpected_Completion_Date = Deliverable_Expected_Completion_Date_toDate,\n\t\tPlanned_Completion_Date = Deliverable_Planned_Completion_Date_toDate,\n\t\tCurrent_Progress_Perc_Complete,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tProcess_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectedColumnsOutputInsert\nSegregateValidInvalidRows@InvalidRows derive(ConcatenatedMessage = concat(AssetReportingDateValidateMsg, ReportingDateProjectIDValidateMsg, LkpRelationalProjectIDValidateMsg, \r\nPrimaryManageActivityValidateMsg, ExpectedCompletionValidateMsg, PlannedCompletionValidateMsg)) ~> ConcatenateInvalidColumnsMessage\nConcatenateInvalidColumnsMessage select(mapColumn(\n\t\tProject_ID,\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tPrimary_Management_Activity,\n\t\tProject_Objectives,\n\t\tExpected_Value_Impact,\n\t\tDeliverable,\n\t\tProject_Weighting,\n\t\tExpected_Completion_Date = Deliverable_Expected_Completion_Date,\n\t\tPlanned_Completion_Date = Deliverable_Planned_Completion_Date,\n\t\tCurrent_Progress_Perc_Complete,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tSource_File = Work_Book,\n\t\tSource_Sub_File = Work_Sheet,\n\t\tProcess_Name,\n\t\tError_Desc = ConcatenatedMessage\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectedOutputColumnsError\nDateTypeTransform keyGenerate(output(RowNumber as long),\n\tstartAt: 1L,\n\tstepValue: 1L,\n\tpartitionBy('hash', 1)) ~> GenerateRowNumber\nSourceDataTab derive(Reporting_Period = toDate(Reporting_Period),\n\t\tDeliverable_Expected_Completion_Date_toDate = toDate(Deliverable_Expected_Completion_Date),\n\t\tDeliverable_Planned_Completion_Date_toDate = toDate(Deliverable_Planned_Completion_Date),\n\t\tProject_Weighting = toShort(Deliverable_Project_Weighting),\n\t\tCurrent_Progress_Perc_Complete = toShort(toDecimal(Current_Progress_Percent_Complete, 3, 2) * 100),\n\t\tProject_ID = toInteger(Project_ID),\n\t\tInsert_Datetime = fromUTC(currentUTC(), 'Australia/Sydney'),\n\t\tUpdate_Datetime = toTimestamp('9999-12-31 00:00:00'),\n\t\tWork_Book = $WorkbookName,\n\t\tWork_Sheet = $TabName,\n\t\tProcess_Name = concatWS('-',$MasterPipeline,$WorkbookName,$TabName),\n\t\tCurrentReportingPeriod = toDate($CurrentQuarterDate)) ~> DateTypeTransform\nSegregateValidInvalidRows@ValidRows split(equals(Reporting_Period, CurrentReportingPeriod),\n\tdisjoint: false) ~> SplitInsertAndUpdate@(Insert, Update)\nUpdateDatetimeValue select(mapColumn(\n\t\tProject_ID,\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tPrimary_Management_Activity,\n\t\tProject_Objectives,\n\t\tExpected_Value_Impact,\n\t\tDeliverable,\n\t\tProject_Weighting,\n\t\tExpected_Completion_Date = Deliverable_Expected_Completion_Date_toDate,\n\t\tPlanned_Completion_Date = Deliverable_Planned_Completion_Date_toDate,\n\t\tCurrent_Progress_Perc_Complete,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tProcess_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumnsOutputUpdate\nSplitInsertAndUpdate@Update derive(Update_Datetime = fromUTC(currentUTC(), 'Australia/Sydney'),\n\t\tInsert_Datetime = Insert_Datetime_Lkp) ~> UpdateDatetimeValue\nRelationalStrategicProjectsLkp select(mapColumn(\n\t\tAsset_ID_Lkp = Asset_ID,\n\t\tFund_ID_Lkp = Fund_ID,\n\t\tProject_ID_Lkp = Project_ID,\n\t\tReporting_Period_Lkp = Reporting_Period,\n\t\tPrimary_Management_Activity_Lkp = Primary_Management_Activity,\n\t\tProject_Objectives_Lkp = Project_Objectives,\n\t\tExpected_Value_Impact_Lkp = Expected_Value_Impact,\n\t\tDeliverable_Lkp = Deliverable,\n\t\tProject_Weighting_Lkp = Project_Weighting,\n\t\tExpected_Completion_Date_Lkp = Expected_Completion_Date,\n\t\tPlanned_Completion_Date_Lkp = Planned_Completion_Date,\n\t\tCurrent_Progress_Perc_Complete_Lkp = Current_Progress_Perc_Complete,\n\t\tInsert_Datetime_Lkp = Insert_Datetime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectStrategicProjectsLkp\nExcludeFirstRow, SelectStrategicProjectsLkp lookup(Project_ID == Project_ID_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupStrategicProject\nGenerateRowNumber filter(RowNumber > 1 && \r\n(not(isNull(Primary_Management_Activity)) || not(isNull(Project_Objectives)) || \r\nnot(isNull(Expected_Value_Impact)) || not(isNull(Deliverable)) || not(isNull(Deliverable_Project_Weighting)) || \r\nnot(isNull(Deliverable_Expected_Completion_Date)) || not(isNull(Deliverable_Planned_Completion_Date)) || not(isNull(Current_Progress_Percent_Complete))\r\n)) ~> ExcludeFirstRow\nSelectedColumnsOutputInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concatWS(\"_\", $WorkbookName, $TabName,$CurrentQuarterDate,'LoadReady'))],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tPrimary_Management_Activity,\n\t\tProject_Objectives,\n\t\tExpected_Value_Impact,\n\t\tDeliverable,\n\t\tProject_Weighting,\n\t\tExpected_Completion_Date,\n\t\tPlanned_Completion_Date,\n\t\tCurrent_Progress_Perc_Complete,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tProcess_Name\n\t),\n\tpartitionBy('hash', 1)) ~> TargetPersistentParquetInsert\nSelectedOutputColumnsError sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tProject_ID,\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tPrimary_Management_Activity,\n\t\tProject_Objectives,\n\t\tExpected_Value_Impact,\n\t\tDeliverable,\n\t\tProject_Weighting,\n\t\tExpected_Completion_Date,\n\t\tPlanned_Completion_Date,\n\t\tCurrent_Progress_Perc_Complete,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tSource_File,\n\t\tSource_Sub_File,\n\t\tProcess_Name,\n\t\tError_Desc\n\t),\n\tpartitionBy('hash', 1)) ~> ErrorTable\nSelectColumnsOutputUpdate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concatWS(\"_\", $WorkbookName, $TabName,$CurrentQuarterDate,'Update'))],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tProject_ID,\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tPrimary_Management_Activity,\n\t\tProject_Objectives,\n\t\tExpected_Value_Impact,\n\t\tDeliverable,\n\t\tProject_Weighting,\n\t\tExpected_Completion_Date,\n\t\tPlanned_Completion_Date,\n\t\tCurrent_Progress_Perc_Complete,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tProcess_Name\n\t),\n\tpartitionBy('hash', 1)) ~> TargetPersistenParquetUpdate"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadXlsxStrategicProjects_Step2_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetPersistentOpsWithTabParam_ds",
								"type": "DatasetReference"
							},
							"name": "SourceReadyLoad"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQLtableGenericWithParam_ds",
								"type": "DatasetReference"
							},
							"name": "TargetRelationalDelete"
						}
					],
					"transformations": [
						{
							"name": "SelectColumnsForDelete"
						},
						{
							"name": "AggregateAssetFundReportingPeriod"
						},
						{
							"name": "AlterRowDelete"
						}
					],
					"script": "parameters{\n\tWorkbookName as string,\n\tTabName as string\n}\nsource(output(\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tReporting_Period as date,\n\t\tPrimary_Management_Activity as string,\n\t\tProject_Objectives as string,\n\t\tExpected_Value_Impact as string,\n\t\tDeliverable as string,\n\t\tProject_Weighting as short,\n\t\tExpected_Completion_Date as date,\n\t\tPlanned_Completion_Date as date,\n\t\tCurrent_Progress_Perc_Complete as short,\n\t\tInsert_Datetime as timestamp,\n\t\tUpdate_Datetime as timestamp,\n\t\tProcess_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tpartitionBy('hash', 1)) ~> SourceReadyLoad\nSourceReadyLoad select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumnsForDelete\nSelectColumnsForDelete aggregate(groupBy(Asset_ID,\n\t\tFund_ID,\n\t\tReporting_Period),\n\tUniqueCount = count()) ~> AggregateAssetFundReportingPeriod\nAggregateAssetFundReportingPeriod alterRow(deleteIf(UniqueCount>0)) ~> AlterRowDelete\nAlterRowDelete sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:false,\n\tkeys:['Asset_ID','Fund_ID','Reporting_Period'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period\n\t),\n\tpartitionBy('hash', 1)) ~> TargetRelationalDelete"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadXlsxStrategicProjects_Step3_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetPersistentOpsWithTabParam_ds",
								"type": "DatasetReference"
							},
							"name": "SourceReadyLoad"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQLtableGenericWithParam_ds",
								"type": "DatasetReference"
							},
							"name": "TargetRelational"
						}
					],
					"transformations": [
						{
							"name": "MapColumns"
						}
					],
					"script": "parameters{\n\tWorkbookName as string,\n\tTabName as string\n}\nsource(output(\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tReporting_Period as date,\n\t\tPrimary_Management_Activity as string,\n\t\tProject_Objectives as string,\n\t\tExpected_Value_Impact as string,\n\t\tDeliverable as string,\n\t\tProject_Weighting as short,\n\t\tExpected_Completion_Date as date,\n\t\tPlanned_Completion_Date as date,\n\t\tCurrent_Progress_Perc_Complete as short,\n\t\tInsert_Datetime as timestamp,\n\t\tUpdate_Datetime as timestamp,\n\t\tProcess_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tpartitionBy('hash', 1)) ~> SourceReadyLoad\nSourceReadyLoad select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tPrimary_Management_Activity,\n\t\tProject_Objectives,\n\t\tExpected_Value_Impact,\n\t\tDeliverable,\n\t\tProject_Weighting,\n\t\tExpected_Completion_Date,\n\t\tPlanned_Completion_Date,\n\t\tCurrent_Progress_Perc_Complete,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tProcess_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> MapColumns\nMapColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tPrimary_Management_Activity,\n\t\tProject_Objectives,\n\t\tExpected_Value_Impact,\n\t\tDeliverable,\n\t\tProject_Weighting,\n\t\tExpected_Completion_Date,\n\t\tPlanned_Completion_Date,\n\t\tCurrent_Progress_Perc_Complete,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tProcess_Name\n\t),\n\tpartitionBy('hash', 1)) ~> TargetRelational"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadXlsxStrategicProjects_Step4_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetPersistentOpsWithTabParam_ds",
								"type": "DatasetReference"
							},
							"name": "SourceUpdate"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQLtableGenericWithParam_ds",
								"type": "DatasetReference"
							},
							"name": "TargetRelational"
						}
					],
					"transformations": [
						{
							"name": "MapColumns"
						},
						{
							"name": "AlterRowUpdate"
						}
					],
					"script": "parameters{\n\tWorkbookName as string,\n\tTabName as string\n}\nsource(output(\n\t\tProject_ID as integer,\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tReporting_Period as date,\n\t\tPrimary_Management_Activity as string,\n\t\tProject_Objectives as string,\n\t\tExpected_Value_Impact as string,\n\t\tDeliverable as string,\n\t\tProject_Weighting as short,\n\t\tExpected_Completion_Date as date,\n\t\tPlanned_Completion_Date as date,\n\t\tCurrent_Progress_Perc_Complete as short,\n\t\tInsert_Datetime as timestamp,\n\t\tUpdate_Datetime as timestamp,\n\t\tProcess_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tpartitionBy('hash', 1)) ~> SourceUpdate\nSourceUpdate select(mapColumn(\n\t\tProject_ID,\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tPrimary_Management_Activity,\n\t\tProject_Objectives,\n\t\tExpected_Value_Impact,\n\t\tDeliverable,\n\t\tProject_Weighting,\n\t\tExpected_Completion_Date,\n\t\tPlanned_Completion_Date,\n\t\tCurrent_Progress_Perc_Complete,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tProcess_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> MapColumns\nMapColumns alterRow(updateIf(not(isNull(Project_ID)))) ~> AlterRowUpdate\nAlterRowUpdate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['Project_ID'],\n\tskipKeyWrites:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tProject_ID,\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tPrimary_Management_Activity,\n\t\tProject_Objectives,\n\t\tExpected_Value_Impact,\n\t\tDeliverable,\n\t\tProject_Weighting,\n\t\tExpected_Completion_Date,\n\t\tPlanned_Completion_Date,\n\t\tCurrent_Progress_Perc_Complete,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tProcess_Name\n\t),\n\tpartitionBy('hash', 1)) ~> TargetRelational"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadXlsxTimberSales_Step1_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetPersistentOpsWithTabParam_ds",
								"type": "DatasetReference"
							},
							"name": "SourceDataTab"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference"
							},
							"name": "RelationalSpeciesType"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference"
							},
							"name": "RelationalSalesUnit"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference"
							},
							"name": "RelationalDeliveryPoint"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ParquetPersistentOps_ds",
								"type": "DatasetReference"
							},
							"name": "TargetPersistentParquetInsert"
						},
						{
							"dataset": {
								"referenceName": "SQLtableGenericWithParam_ds",
								"type": "DatasetReference"
							},
							"name": "ErrorTable"
						}
					],
					"transformations": [
						{
							"name": "ValidateMandatoryColumns",
							"description": "ReportingDateCertificationIDValidateMsg is a test and should be considered as part of the conditional split Insert/Update activity"
						},
						{
							"name": "SegregateValidInvalidRows"
						},
						{
							"name": "SelectedColumnsOutputInsert"
						},
						{
							"name": "ConcatenateInvalidColumnsMessage"
						},
						{
							"name": "SelectedOutputColumnsError"
						},
						{
							"name": "GenerateRowNumber"
						},
						{
							"name": "ExcludeFirstRow"
						},
						{
							"name": "DateTypeTransform"
						},
						{
							"name": "SelectSpeciesTypeLkp"
						},
						{
							"name": "LookupSpeciesType"
						},
						{
							"name": "SelectSalesUnitLkp"
						},
						{
							"name": "LookupSalesUnit"
						},
						{
							"name": "SelectPricePointLkp"
						},
						{
							"name": "LookupPricePointFromDeliveryPoint"
						}
					],
					"script": "parameters{\n\tMasterUtcTag as string,\n\tCurrentRunDateTime as string,\n\tWorkbookName as string,\n\tTabName as string,\n\tCurrentQuarterDate as string,\n\tMasterPipeline as string\n}\nsource(output(\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tReporting_Period as string,\n\t\tValidation_Flag as string,\n\t\tCustomer as string,\n\t\tDomestic_or_Export as string,\n\t\tSpecies as string,\n\t\tProduct_Type as string,\n\t\tDelivery_Point as string,\n\t\tPrice_Point as string,\n\t\tSales_Unit as string,\n\t\tSales_Quantity as string,\n\t\tAverage_Sales_Price as string,\n\t\tSales_Revenue as string,\n\t\tProduction_Cost as string,\n\t\tStumpage as string,\n\t\tUnit_Stumpage as string,\n\t\tCurrency as string,\n\t\tMonth as string,\n\t\tBudget_Sales_Quantity as string,\n\t\tBudget_Sales_Revenue as string,\n\t\tBudget_Production_Cost as string,\n\t\tBudget_Unit_Stumpage as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tpartitionBy('hash', 1)) ~> SourceDataTab\nsource(output(\n\t\tSpecies_Code as string,\n\t\tSpecies as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT [Species_Code]\\n      ,[Species]\\n  FROM [relational].[OPS_Species_Type]\\n  WHERE [Active_YN] = \\'Y\\'',\n\tformat: 'query',\n\tpartitionBy('hash', 1)) ~> RelationalSpeciesType\nsource(output(\n\t\tSales_Unit_Code as string,\n\t\tSales_Unit as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT Sales_Unit_Code\\n      ,Sales_Unit\\n  FROM relational.OPS_Sales_Unit\\n  WHERE Active_YN = \\'Y\\'',\n\tformat: 'query') ~> RelationalSalesUnit\nsource(output(\n\t\tPrice_Point_Code as string,\n\t\tPrice_Point as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT Price_Point_Code\\n      ,Price_Point\\n  FROM relational.OPS_Price_Point\\n  WHERE Active_YN = \\'Y\\'',\n\tformat: 'query') ~> RelationalDeliveryPoint\nLookupPricePointFromDeliveryPoint derive(SpeciesTypeValidateMsg = iif(isNull(Species_Code_Lkp), \"Species/\", \"\"),\n\t\tSalesUnitValidateMsg = iif(isNull(Sales_Unit_Code_Lkp), \"Sales Unit/\", \"\"),\n\t\tAssetReportingDateValidateMsg = iif(isNull(Asset_ID) || isNull(Fund_ID) || isNull(Reporting_Period), \"Invalid Asset or Reporting Period/\", \"\"),\n\t\tDeliveryPointValidateMsg = iif(isNull(Price_Point_Code_Lkp), \"Delivery Point/\", \"\"),\n\t\tCustomerValidateMsg = iif(isNull(Customer),\"Customer/\",\"\"),\n\t\tDomesticExportValidateMsg = iif(isNull(Domestic_or_Export),\"Domestic or Export/\",\"\"),\n\t\tPricePointValidateMsg = iif(isNull(Delivery_Point),\"Price Point/\",\"\"),\n\t\tSalesQtyValidateMsg = iif(isNull(Sales_Quantity),\"Sales Quantity/\",\"\"),\n\t\tProductTypeValidateMsg = iif(isNull(Product_Type),\"Product Type/\",\"\")) ~> ValidateMandatoryColumns\nValidateMandatoryColumns split(length(concatWS('',SpeciesTypeValidateMsg,\r\nSalesUnitValidateMsg,\r\nAssetReportingDateValidateMsg,\r\nDeliveryPointValidateMsg,\r\nCustomerValidateMsg,\r\nDomesticExportValidateMsg,\r\nPricePointValidateMsg,\r\nSalesQtyValidateMsg,\r\nProductTypeValidateMsg)) == 0,\n\tdisjoint: false) ~> SegregateValidInvalidRows@(ValidRows, InvalidRows)\nSegregateValidInvalidRows@ValidRows select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tCustomer,\n\t\tDomestic_Export = Domestic_or_Export,\n\t\tProduct = Product_Type,\n\t\tDelivery_Point_Code = Delivery_Point,\n\t\tPrice_Point,\n\t\tSales_Quantity,\n\t\tAverage_Sales_Price,\n\t\tSales_Revenue,\n\t\tProduction_Cost,\n\t\tStumpage,\n\t\tUnit_Stumpage,\n\t\tCurrency_Code = Currency,\n\t\tSales_Month = Month,\n\t\tBudget_Sales_Quantity,\n\t\tBudget_Sales_Revenue,\n\t\tBudget_Production_Cost,\n\t\tBudget_Stumpage = Budget_Unit_Stumpage,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tProcess_Name,\n\t\tSales_Unit_Code = Sales_Unit_Code_Lkp,\n\t\tSpecies_Code = Species_Code_Lkp\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectedColumnsOutputInsert\nSegregateValidInvalidRows@InvalidRows derive(ConcatenatedMessage = concat(SpeciesTypeValidateMsg,\r\nSalesUnitValidateMsg,\r\nAssetReportingDateValidateMsg,\r\nDeliveryPointValidateMsg,\r\nCustomerValidateMsg,\r\nDomesticExportValidateMsg,\r\nPricePointValidateMsg,\r\nSalesQtyValidateMsg,\r\nProductTypeValidateMsg)) ~> ConcatenateInvalidColumnsMessage\nConcatenateInvalidColumnsMessage select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tValidation_Flag,\n\t\tCustomer,\n\t\tDomestic_Export = Domestic_or_Export,\n\t\tSpecies,\n\t\tProduct = Product_Type,\n\t\tDelivery_Point_Code = Delivery_Point,\n\t\tPrice_Point,\n\t\tSales_Unit,\n\t\tSales_Quantity,\n\t\tAverage_Sales_Price,\n\t\tSales_Revenue,\n\t\tProduction_Cost,\n\t\tStumpage,\n\t\tUnit_Stumpage,\n\t\tCurrency_Code = Currency,\n\t\tSales_Month = Month,\n\t\tBudget_Sales_Quantity,\n\t\tBudget_Sales_Revenue,\n\t\tBudget_Production_Cost,\n\t\tBudget_Stumpage = Budget_Unit_Stumpage,\n\t\tInsert_Datetime,\n\t\tSource_File = Work_Book,\n\t\tSource_Sub_File = Work_Sheet,\n\t\tProcess_Name,\n\t\tError_Desc = ConcatenatedMessage\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectedOutputColumnsError\nDateTypeTransform keyGenerate(output(RowNumber as long),\n\tstartAt: 1L,\n\tstepValue: 1L,\n\tpartitionBy('hash', 1)) ~> GenerateRowNumber\nGenerateRowNumber filter(RowNumber > 1 && \r\n(not(isNull(Customer)) || not(isNull(Domestic_or_Export)) || not(isNull(Species)) || \r\nnot(isNull(Product_Type)) || not(isNull(Delivery_Point)) || not(isNull(Price_Point)) || \r\nnot(isNull(Sales_Unit)) || not(isNull(Sales_Quantity)) || not(isNull(Average_Sales_Price)) || \r\nnot(isNull(Production_Cost)) || not(isNull(Currency)) || \r\nnot(isNull(Month)) || not(isNull(Budget_Sales_Quantity)) || not(isNull(Budget_Sales_Revenue)) || not(isNull(Budget_Production_Cost)) || \r\nnot(isNull(Budget_Unit_Stumpage))\r\n)) ~> ExcludeFirstRow\nSourceDataTab derive(Insert_Datetime = fromUTC(currentUTC(), 'Australia/Sydney'),\n\t\tUpdate_Datetime = toTimestamp('9999-12-31 00:00:00'),\n\t\tWork_Book = $WorkbookName,\n\t\tWork_Sheet = $TabName,\n\t\tProcess_Name = concatWS('-',$MasterPipeline,$WorkbookName,$TabName),\n\t\tCurrentReportingPeriod = toDate($CurrentQuarterDate),\n\t\tReporting_Period = toDate(Reporting_Period),\n\t\tSales_Quantity = toDecimal(Sales_Quantity, 19, 4),\n\t\tSales_Revenue = toDecimal(Sales_Revenue, 19, 4),\n\t\tProduction_Cost = toDecimal(Production_Cost, 19, 4),\n\t\tStumpage = toDecimal(Stumpage, 19, 4),\n\t\tUnit_Stumpage = toDecimal(Unit_Stumpage, 19, 4),\n\t\tAverage_Sales_Price = toDecimal(Average_Sales_Price, 19, 4),\n\t\tBudget_Sales_Quantity = toDecimal(Budget_Sales_Quantity, 19, 4),\n\t\tBudget_Sales_Revenue = toDecimal(Budget_Sales_Revenue, 19, 4),\n\t\tBudget_Production_Cost = toDecimal(Budget_Production_Cost, 19, 4),\n\t\tBudget_Unit_Stumpage = toDecimal(Budget_Unit_Stumpage, 19, 4),\n\t\tPrice_Point = toDecimal(Price_Point, 19, 4),\n\t\tMonth = toDate(Month)) ~> DateTypeTransform\nRelationalSpeciesType select(mapColumn(\n\t\tSpecies_Code_Lkp = Species_Code,\n\t\tSpecies_Lkp = Species\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSpeciesTypeLkp\nLookupSalesUnit, SelectSpeciesTypeLkp lookup(Species == Species_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupSpeciesType\nRelationalSalesUnit select(mapColumn(\n\t\tSales_Unit_Code_Lkp = Sales_Unit_Code,\n\t\tSales_Unit_Lkp = Sales_Unit\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectSalesUnitLkp\nExcludeFirstRow, SelectSalesUnitLkp lookup(Sales_Unit == Sales_Unit_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupSalesUnit\nRelationalDeliveryPoint select(mapColumn(\n\t\tPrice_Point_Code_Lkp = Price_Point_Code,\n\t\tPrice_Point_Lkp = Price_Point\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPricePointLkp\nLookupSpeciesType, SelectPricePointLkp lookup(Delivery_Point == Price_Point_Code_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupPricePointFromDeliveryPoint\nSelectedColumnsOutputInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concatWS(\"_\", $WorkbookName, $TabName,$CurrentQuarterDate,'LoadReady'))],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tCustomer,\n\t\tDomestic_Export,\n\t\tProduct,\n\t\tDelivery_Point_Code,\n\t\tPrice_Point,\n\t\tSales_Quantity,\n\t\tAverage_Sales_Price,\n\t\tSales_Revenue,\n\t\tProduction_Cost,\n\t\tStumpage,\n\t\tUnit_Stumpage,\n\t\tCurrency_Code,\n\t\tSales_Month,\n\t\tBudget_Sales_Quantity,\n\t\tBudget_Sales_Revenue,\n\t\tBudget_Production_Cost,\n\t\tBudget_Stumpage,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tProcess_Name,\n\t\tSales_Unit_Code,\n\t\tSpecies_Code\n\t),\n\tpartitionBy('hash', 1)) ~> TargetPersistentParquetInsert\nSelectedOutputColumnsError sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tSpecies,\n\t\tCustomer,\n\t\tDomestic_Export,\n\t\tSales_Unit,\n\t\tSales_Quantity,\n\t\tSales_Revenue,\n\t\tProduction_Cost,\n\t\tStumpage,\n\t\tUnit_Stumpage,\n\t\tCurrency_Code,\n\t\tAverage_Sales_Price,\n\t\tBudget_Sales_Quantity,\n\t\tBudget_Sales_Revenue,\n\t\tBudget_Production_Cost,\n\t\tBudget_Stumpage,\n\t\tInsert_Datetime,\n\t\tProcess_Name,\n\t\tProduct,\n\t\tDelivery_Point_Code,\n\t\tPrice_Point,\n\t\tSales_Month,\n\t\tSource_File,\n\t\tSource_Sub_File,\n\t\tError_Desc\n\t),\n\tpartitionBy('hash', 1)) ~> ErrorTable"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadXlsxTimberSales_Step2_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetPersistentOpsWithTabParam_ds",
								"type": "DatasetReference"
							},
							"name": "SourceReadyLoad"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQLtableGenericWithParam_ds",
								"type": "DatasetReference"
							},
							"name": "TargetRelational"
						}
					],
					"transformations": [
						{
							"name": "SelectKeyColumnsForDelete"
						},
						{
							"name": "AggregateAssetFundReportingPeriod"
						},
						{
							"name": "AlterRowDelete"
						}
					],
					"script": "parameters{\n\tWorkbookName as string,\n\tTabName as string\n}\nsource(output(\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tReporting_Period as date,\n\t\tCustomer as string,\n\t\tDomestic_Export as string,\n\t\tProduct as string,\n\t\tDelivery_Point_Code as string,\n\t\tPrice_Point as decimal(19,4),\n\t\tSales_Quantity as decimal(19,4),\n\t\tAverage_Sales_Price as decimal(19,4),\n\t\tSales_Revenue as decimal(19,4),\n\t\tProduction_Cost as decimal(19,4),\n\t\tStumpage as decimal(19,4),\n\t\tUnit_Stumpage as decimal(19,4),\n\t\tCurrency_Code as string,\n\t\tSales_Month as date,\n\t\tBudget_Sales_Quantity as decimal(19,4),\n\t\tBudget_Sales_Revenue as decimal(19,4),\n\t\tBudget_Production_Cost as decimal(19,4),\n\t\tBudget_Stumpage as decimal(19,4),\n\t\tInsert_Datetime as timestamp,\n\t\tUpdate_Datetime as timestamp,\n\t\tProcess_Name as string,\n\t\tSales_Unit_Code as string,\n\t\tSpecies_Code as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tpartitionBy('hash', 1)) ~> SourceReadyLoad\nSourceReadyLoad select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectKeyColumnsForDelete\nSelectKeyColumnsForDelete aggregate(groupBy(Asset_ID,\n\t\tFund_ID,\n\t\tReporting_Period),\n\tUniqueCount = count()) ~> AggregateAssetFundReportingPeriod\nAggregateAssetFundReportingPeriod alterRow(deleteIf(UniqueCount>0)) ~> AlterRowDelete\nAlterRowDelete sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:true,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:false,\n\tkeys:['Asset_ID','Fund_ID','Reporting_Period'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period\n\t),\n\tpartitionBy('hash', 1)) ~> TargetRelational"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadXlsxTimberSales_Step3_df')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetPersistentOpsWithTabParam_ds",
								"type": "DatasetReference"
							},
							"name": "SourceReadyLoad"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SQLtableGenericWithParam_ds",
								"type": "DatasetReference"
							},
							"name": "TargetRelational"
						}
					],
					"transformations": [
						{
							"name": "MapColumns"
						}
					],
					"script": "parameters{\n\tWorkbookName as string,\n\tTabName as string\n}\nsource(output(\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tReporting_Period as date,\n\t\tCustomer as string,\n\t\tDomestic_Export as string,\n\t\tProduct as string,\n\t\tDelivery_Point_Code as string,\n\t\tPrice_Point as decimal(19,4),\n\t\tSales_Quantity as decimal(19,4),\n\t\tAverage_Sales_Price as decimal(19,4),\n\t\tSales_Revenue as decimal(19,4),\n\t\tProduction_Cost as decimal(19,4),\n\t\tStumpage as decimal(19,4),\n\t\tUnit_Stumpage as decimal(19,4),\n\t\tCurrency_Code as string,\n\t\tSales_Month as date,\n\t\tBudget_Sales_Quantity as decimal(19,4),\n\t\tBudget_Sales_Revenue as decimal(19,4),\n\t\tBudget_Production_Cost as decimal(19,4),\n\t\tBudget_Stumpage as decimal(19,4),\n\t\tInsert_Datetime as timestamp,\n\t\tUpdate_Datetime as timestamp,\n\t\tProcess_Name as string,\n\t\tSales_Unit_Code as string,\n\t\tSpecies_Code as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tpartitionBy('hash', 1)) ~> SourceReadyLoad\nSourceReadyLoad select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tCustomer,\n\t\tDomestic_Export,\n\t\tProduct,\n\t\tDelivery_Point_Code,\n\t\tPrice_Point,\n\t\tSales_Quantity,\n\t\tAverage_Sales_Price,\n\t\tSales_Revenue,\n\t\tProduction_Cost,\n\t\tStumpage,\n\t\tUnit_Stumpage,\n\t\tCurrency_Code,\n\t\tSales_Month,\n\t\tBudget_Sales_Quantity,\n\t\tBudget_Sales_Revenue,\n\t\tBudget_Production_Cost,\n\t\tBudget_Stumpage,\n\t\tInsert_Datetime,\n\t\tProcess_Name,\n\t\tSales_Unit_Code,\n\t\tSpecies_Code\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> MapColumns\nMapColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tSpecies_Code,\n\t\tCustomer,\n\t\tDomestic_Export,\n\t\tSales_Unit_Code,\n\t\tSales_Quantity,\n\t\tSales_Revenue,\n\t\tProduction_Cost,\n\t\tStumpage,\n\t\tUnit_Stumpage,\n\t\tCurrency_Code,\n\t\tAverage_Sales_Price,\n\t\tBudget_Sales_Quantity,\n\t\tBudget_Sales_Revenue,\n\t\tBudget_Production_Cost,\n\t\tBudget_Stumpage,\n\t\tInsert_Datetime,\n\t\tProcess_Name,\n\t\tProduct,\n\t\tDelivery_Point_Code,\n\t\tPrice_Point,\n\t\tSales_Month\n\t),\n\tpartitionBy('hash', 1)) ~> TargetRelational"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Geo_sourcelandingscrubbed_geojsonmodified_ds",
								"type": "DatasetReference"
							},
							"name": "geojsonmodified"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "testJson",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Select1"
						},
						{
							"name": "MapDrifted2",
							"description": "Creates an explicit mapping for each drifted column"
						},
						{
							"name": "Filter1"
						}
					],
					"script": "source(output(\n\t\ttype as string,\n\t\tproperties as (Asset_Id as string, Fund_Id as string, OBJECTID as string, Property as string, Crop_Type as string, Plant_Year as string, State as string, Area_Ha as double, SHAPE_Leng as double, SHAPE_Area as double),\n\t\tgeometry as (type as string, coordinates as string)\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tdocumentForm: 'documentPerLine',\n\tbackslashEscape: true) ~> geojsonmodified\nFilter1 select(mapColumn(\n\t\tAsset_ID = asset_id,\n\t\tFund_ID = fund_id,\n\t\tLoc_Json = loc_json\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select1\ngeojsonmodified derive({_corrupt_record} = toString(byName('_corrupt_record')),\n\t\tasset_id = properties.Asset_Id,\n\t\tfund_id = properties.Fund_Id,\n\t\tloc_json = geometry.coordinates) ~> MapDrifted2\nMapDrifted2 filter(not(isNull(asset_id))) ~> Filter1\nSelect1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tasset_id as string,\n\t\tfund_id as string,\n\t\tloc_geometry as binary,\n\t\tloc_json as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tasset_id = Asset_ID,\n\t\tfund_id = Fund_ID,\n\t\tloc_json = Loc_Json\n\t),\n\tpartitionBy('hash', 1)) ~> sink1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessMktUpdateDimDataSource_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ProcessDimData",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadMktDimDataSource_InsertUpdate_df",
								"type": "DataFlowReference",
								"parameters": {
									"GeneratedBatchDate": {
										"value": "'@{pipeline().parameters.GeneratedBatchDate}'",
										"type": "Expression"
									},
									"WorkbookName": {
										"value": "'@{pipeline().parameters.WorkbookName}'",
										"type": "Expression"
									},
									"WorksheetName": {
										"value": "'@{pipeline().parameters.WorksheetName}'",
										"type": "Expression"
									},
									"MasterPipelineName": {
										"value": "'@{pipeline().parameters.MasterPipelineName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ReadSource": {
										"FileName": {
											"value": "@pipeline().parameters.ScrubbedFileName",
											"type": "Expression"
										}
									},
									"DatamartDimDataSourceLkp": {},
									"TargetDim": {
										"Schema": {
											"value": "@pipeline().parameters.DimSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.ShortDimTableName",
											"type": "Expression"
										}
									},
									"ErrorTable": {
										"Schema": {
											"value": "@pipeline().parameters.ErrorSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.ShortErrorTableName",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"WorkbookName": {
						"type": "string"
					},
					"WorksheetName": {
						"type": "string"
					},
					"GeneratedBatchDate": {
						"type": "string"
					},
					"MasterPipelineName": {
						"type": "string"
					},
					"ScrubbedFileName": {
						"type": "string"
					},
					"DimSchemaName": {
						"type": "string"
					},
					"ShortDimTableName": {
						"type": "string"
					},
					"ErrorSchemaName": {
						"type": "string"
					},
					"ShortErrorTableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-09-16T12:08:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessMktUpdateDimDeliveryPoint_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ProcessDimData",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadMktDimDeliveryPoint_InsertUpdate_df",
								"type": "DataFlowReference",
								"parameters": {
									"GeneratedBatchDate": {
										"value": "'@{pipeline().parameters.GeneratedBatchDate}'",
										"type": "Expression"
									},
									"WorkbookName": {
										"value": "'@{pipeline().parameters.WorkbookName}'",
										"type": "Expression"
									},
									"WorksheetName": {
										"value": "'@{pipeline().parameters.WorksheetName}'",
										"type": "Expression"
									},
									"MasterPipelineName": {
										"value": "'@{pipeline().parameters.MasterPipelineName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ReadSource": {
										"FileName": {
											"value": "@pipeline().parameters.ScrubbedFileName",
											"type": "Expression"
										}
									},
									"RelationalDimDeliveryPointLkp": {},
									"TargetDim": {
										"Schema": {
											"value": "@pipeline().parameters.DimSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.ShortDimTableName",
											"type": "Expression"
										}
									},
									"ErrorTable": {
										"Schema": {
											"value": "@pipeline().parameters.ErrorSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.ShortErrorTableName",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"WorkbookName": {
						"type": "string"
					},
					"WorksheetName": {
						"type": "string"
					},
					"GeneratedBatchDate": {
						"type": "string"
					},
					"MasterPipelineName": {
						"type": "string"
					},
					"ScrubbedFileName": {
						"type": "string"
					},
					"DimSchemaName": {
						"type": "string"
					},
					"ShortDimTableName": {
						"type": "string"
					},
					"ErrorSchemaName": {
						"type": "string"
					},
					"ShortErrorTableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-09-16T12:08:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessMktUpdateDimIndicator_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ProcessDimData",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadMktDimIndicator_InsertUpdate_df",
								"type": "DataFlowReference",
								"parameters": {
									"GeneratedBatchDate": {
										"value": "'@{pipeline().parameters.GeneratedBatchDate}'",
										"type": "Expression"
									},
									"WorkbookName": {
										"value": "'@{pipeline().parameters.WorkbookName}'",
										"type": "Expression"
									},
									"WorksheetName": {
										"value": "'@{pipeline().parameters.WorksheetName}'",
										"type": "Expression"
									},
									"MasterPipelineName": {
										"value": "'@{pipeline().parameters.MasterPipelineName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ReadSource": {
										"FileName": {
											"value": "@pipeline().parameters.ScrubbedFileName",
											"type": "Expression"
										}
									},
									"DatamartDimIndicatorLkp": {},
									"TargetDim": {
										"Schema": {
											"value": "@pipeline().parameters.DimSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.ShortDimTableName",
											"type": "Expression"
										}
									},
									"ErrorTable": {
										"Schema": {
											"value": "@pipeline().parameters.ErrorSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.ShortErrorTableName",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"WorkbookName": {
						"type": "string"
					},
					"WorksheetName": {
						"type": "string"
					},
					"GeneratedBatchDate": {
						"type": "string"
					},
					"MasterPipelineName": {
						"type": "string"
					},
					"ScrubbedFileName": {
						"type": "string"
					},
					"DimSchemaName": {
						"type": "string"
					},
					"ShortDimTableName": {
						"type": "string"
					},
					"ErrorSchemaName": {
						"type": "string"
					},
					"ShortErrorTableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-09-16T12:08:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessMktUpdateDimProduct_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ProcessDimData",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadMktDimProduct_InsertUpdate_df",
								"type": "DataFlowReference",
								"parameters": {
									"GeneratedBatchDate": {
										"value": "'@{pipeline().parameters.GeneratedBatchDate}'",
										"type": "Expression"
									},
									"WorkbookName": {
										"value": "'@{pipeline().parameters.WorkbookName}'",
										"type": "Expression"
									},
									"WorksheetName": {
										"value": "'@{pipeline().parameters.WorksheetName}'",
										"type": "Expression"
									},
									"MasterPipelineName": {
										"value": "'@{pipeline().parameters.MasterPipelineName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ReadSource": {
										"FileName": {
											"value": "@pipeline().parameters.ScrubbedFileName",
											"type": "Expression"
										}
									},
									"DatamartDimProductLkp": {},
									"DatamartSpeciesLkp": {},
									"RelationalChartOfAccountLkp": {},
									"TargetDim": {
										"Schema": {
											"value": "@pipeline().parameters.DimSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.ShortDimTableName",
											"type": "Expression"
										}
									},
									"ErrorTable": {
										"Schema": {
											"value": "@pipeline().parameters.ErrorSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.ShortErrorTableName",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"WorkbookName": {
						"type": "string"
					},
					"WorksheetName": {
						"type": "string"
					},
					"GeneratedBatchDate": {
						"type": "string"
					},
					"MasterPipelineName": {
						"type": "string"
					},
					"ScrubbedFileName": {
						"type": "string"
					},
					"DimSchemaName": {
						"type": "string"
					},
					"ShortDimTableName": {
						"type": "string"
					},
					"ErrorSchemaName": {
						"type": "string"
					},
					"ShortErrorTableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-09-16T12:08:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessMktUpdateDimSpecies_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ProcessDimData",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadMktDimSpecies_InsertUpdate_df",
								"type": "DataFlowReference",
								"parameters": {
									"GeneratedBatchDate": {
										"value": "'@{pipeline().parameters.GeneratedBatchDate}'",
										"type": "Expression"
									},
									"WorkbookName": {
										"value": "'@{pipeline().parameters.WorkbookName}'",
										"type": "Expression"
									},
									"WorksheetName": {
										"value": "'@{pipeline().parameters.WorksheetName}'",
										"type": "Expression"
									},
									"MasterPipelineName": {
										"value": "'@{pipeline().parameters.MasterPipelineName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ReadSource": {
										"FileName": {
											"value": "@pipeline().parameters.ScrubbedFileName",
											"type": "Expression"
										}
									},
									"DatamartDimSpeciesLkp": {},
									"TargetDim": {
										"Schema": {
											"value": "@pipeline().parameters.DimSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.ShortDimTableName",
											"type": "Expression"
										}
									},
									"ErrorTable": {
										"Schema": {
											"value": "@pipeline().parameters.ErrorSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.ShortErrorTableName",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"WorkbookName": {
						"type": "string"
					},
					"WorksheetName": {
						"type": "string"
					},
					"GeneratedBatchDate": {
						"type": "string"
					},
					"MasterPipelineName": {
						"type": "string"
					},
					"ScrubbedFileName": {
						"type": "string"
					},
					"DimSchemaName": {
						"type": "string"
					},
					"ShortDimTableName": {
						"type": "string"
					},
					"ErrorSchemaName": {
						"type": "string"
					},
					"ShortErrorTableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-09-16T12:08:19Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessMktUpdateDimType_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ProcessDimData",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadMktDimType_InsertUpdate_df",
								"type": "DataFlowReference",
								"parameters": {
									"GeneratedBatchDate": {
										"value": "'@{pipeline().parameters.GeneratedBatchDate}'",
										"type": "Expression"
									},
									"WorkbookName": {
										"value": "'@{pipeline().parameters.WorkbookName}'",
										"type": "Expression"
									},
									"WorksheetName": {
										"value": "'@{pipeline().parameters.WorksheetName}'",
										"type": "Expression"
									},
									"MasterPipelineName": {
										"value": "'@{pipeline().parameters.MasterPipelineName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ReadSource": {
										"FileName": {
											"value": "@pipeline().parameters.ScrubbedFileName",
											"type": "Expression"
										}
									},
									"RelationalDimTypeLkp": {},
									"TargetDim": {
										"Schema": {
											"value": "@pipeline().parameters.DimSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.ShortDimTableName",
											"type": "Expression"
										}
									},
									"ErrorTable": {
										"Schema": {
											"value": "@pipeline().parameters.ErrorSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.ShortErrorTableName",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"WorkbookName": {
						"type": "string"
					},
					"WorksheetName": {
						"type": "string"
					},
					"GeneratedBatchDate": {
						"type": "string"
					},
					"MasterPipelineName": {
						"type": "string"
					},
					"ScrubbedFileName": {
						"type": "string"
					},
					"DimSchemaName": {
						"type": "string"
					},
					"ShortDimTableName": {
						"type": "string"
					},
					"ErrorSchemaName": {
						"type": "string"
					},
					"ShortErrorTableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-09-16T12:08:19Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessMktUpdateDimUom_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ProcessDimData",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadMktDimUom_InsertUpdate_df",
								"type": "DataFlowReference",
								"parameters": {
									"GeneratedBatchDate": {
										"value": "'@{pipeline().parameters.GeneratedBatchDate}'",
										"type": "Expression"
									},
									"WorkbookName": {
										"value": "'@{pipeline().parameters.WorkbookName}'",
										"type": "Expression"
									},
									"WorksheetName": {
										"value": "'@{pipeline().parameters.WorksheetName}'",
										"type": "Expression"
									},
									"MasterPipelineName": {
										"value": "'@{pipeline().parameters.MasterPipelineName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ReadSource": {
										"FileName": {
											"value": "@pipeline().parameters.ScrubbedFileName",
											"type": "Expression"
										}
									},
									"RelationalDimUomLkp": {},
									"TargetDim": {
										"Schema": {
											"value": "@pipeline().parameters.DimSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.ShortDimTableName",
											"type": "Expression"
										}
									},
									"ErrorTable": {
										"Schema": {
											"value": "@pipeline().parameters.ErrorSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.ShortErrorTableName",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"WorkbookName": {
						"type": "string"
					},
					"WorksheetName": {
						"type": "string"
					},
					"GeneratedBatchDate": {
						"type": "string"
					},
					"MasterPipelineName": {
						"type": "string"
					},
					"ScrubbedFileName": {
						"type": "string"
					},
					"DimSchemaName": {
						"type": "string"
					},
					"ShortDimTableName": {
						"type": "string"
					},
					"ErrorSchemaName": {
						"type": "string"
					},
					"ShortErrorTableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-09-16T12:08:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessMktUpdateFactMarket_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Pass2_ProcessAndPopulate_df",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Pass1_InsertNewSpeciesProductDims_df",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadMktFactMarket_Pass2_ProcessAndPopulate_df",
								"type": "DataFlowReference",
								"parameters": {
									"GeneratedBatchDate": {
										"value": "'@{pipeline().parameters.GeneratedBatchDate}'",
										"type": "Expression"
									},
									"WorkbookName": {
										"value": "'@{pipeline().parameters.WorkbookName}'",
										"type": "Expression"
									},
									"WorksheetName": {
										"value": "'@{pipeline().parameters.WorksheetName}'",
										"type": "Expression"
									},
									"MasterPipelineName": {
										"value": "'@{pipeline().parameters.MasterPipelineName}'",
										"type": "Expression"
									},
									"Product_Group": {
										"value": "'@{pipeline().parameters.Product_Group}'",
										"type": "Expression"
									},
									"DimSchemaName": {
										"value": "'@{pipeline().parameters.DimSchemaName}'",
										"type": "Expression"
									},
									"ErrorSchemaName": {
										"value": "'@{pipeline().parameters.ErrorSchemaName}'",
										"type": "Expression"
									},
									"ShortFactTableName": {
										"value": "'@{pipeline().parameters.ShortFactTableName}'",
										"type": "Expression"
									},
									"ShortErrorTableName": {
										"value": "'@{pipeline().parameters.ShortErrorTableName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ReadSource": {
										"FileName": {
											"value": "@pipeline().parameters.ScrubbedFileName",
											"type": "Expression"
										}
									},
									"DatamartDimProductLkp": {},
									"DatamartDimSpeciesLkp": {},
									"DatamartDimDataSource": {},
									"DatamartDimTypePartial": {},
									"DatamartDimRegion": {},
									"RelationalDateDimension": {},
									"DatamartDimUom": {},
									"DatamartDimDeliveryPoint": {},
									"DatamartDimCurrency": {},
									"DatamartDimIndicator": {},
									"DatamartDimType": {},
									"FactErrorTable": {
										"Schema": {
											"value": "@pipeline().parameters.ErrorSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.ShortErrorTableName",
											"type": "Expression"
										}
									},
									"TargetFactInsert": {
										"Schema": {
											"value": "@pipeline().parameters.DimSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.ShortFactTableName",
											"type": "Expression"
										}
									},
									"TargetFactDelete": {
										"Schema": {
											"value": "@pipeline().parameters.DimSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "@pipeline().parameters.ShortFactTableName",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Pass1_InsertNewSpeciesProductDims_df",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadMktFactMarket_Pass1_InsertNewSpeciesProductDims_df",
								"type": "DataFlowReference",
								"parameters": {
									"GeneratedBatchDate": {
										"value": "'@{pipeline().parameters.GeneratedBatchDate}'",
										"type": "Expression"
									},
									"WorkbookName": {
										"value": "'@{pipeline().parameters.WorkbookName}'",
										"type": "Expression"
									},
									"WorksheetName": {
										"value": "'@{pipeline().parameters.WorksheetName}'",
										"type": "Expression"
									},
									"MasterPipelineName": {
										"value": "'@{pipeline().parameters.MasterPipelineName}'",
										"type": "Expression"
									},
									"Product_Group": {
										"value": "'@{pipeline().parameters.Product_Group}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ReadSource": {
										"FileName": {
											"value": "@pipeline().parameters.ScrubbedFileName",
											"type": "Expression"
										}
									},
									"DatamartDimProductLkp": {},
									"DatamartDimSpeciesLkp": {},
									"InsertNewSpeciesDim": {
										"Schema": {
											"value": "@pipeline().parameters.DimSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "Dim_Species",
											"type": "Expression"
										}
									},
									"InsertNewProductDim": {
										"Schema": {
											"value": "@pipeline().parameters.DimSchemaName",
											"type": "Expression"
										},
										"TableName": {
											"value": "Dim_Product",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"WorkbookName": {
						"type": "string"
					},
					"WorksheetName": {
						"type": "string"
					},
					"GeneratedBatchDate": {
						"type": "string"
					},
					"MasterPipelineName": {
						"type": "string"
					},
					"ScrubbedFileName": {
						"type": "string"
					},
					"DimSchemaName": {
						"type": "string"
					},
					"ShortFactTableName": {
						"type": "string"
					},
					"ErrorSchemaName": {
						"type": "string"
					},
					"ShortErrorTableName": {
						"type": "string"
					},
					"Product_Group": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-09-24T06:08:59Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessOpsWorkbookTabAnswers_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Operations tab",
				"activities": [
					{
						"name": "ProcessExcelWorkbookTab",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadXlsxAnswers_Step1_df",
								"type": "DataFlowReference",
								"parameters": {
									"MasterUtcTag": {
										"value": "'@{pipeline().parameters.WorkbookName}'",
										"type": "Expression"
									},
									"CurrentRunDateTime": {
										"value": "'@{pipeline().parameters.CurrentRunDateTime}'",
										"type": "Expression"
									},
									"WorkbookName": {
										"value": "'@{pipeline().parameters.WorkbookName}'",
										"type": "Expression"
									},
									"TabName": {
										"value": "'@{pipeline().parameters.Answers}'",
										"type": "Expression"
									},
									"CurrentQuarterDate": {
										"value": "'@{pipeline().parameters.CurrentQuarterDate}'",
										"type": "Expression"
									},
									"MasterPipeline": {
										"value": "'@{pipeline().parameters.MasterPipeline}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceDataTab": {
										"ParquetFile": {
											"value": "@concat(pipeline().parameters.WorkbookName,'_',pipeline().parameters.Answers,'_',pipeline().parameters.CurrentQuarterDate,'_Extract')",
											"type": "Expression"
										}
									},
									"TargetPersistentParquetInsert": {},
									"ErrorTable": {
										"Schema": {
											"value": "audit",
											"type": "Expression"
										},
										"TableName": {
											"value": "OPS_Answers_Error",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"WorkbookName": {
						"type": "string",
						"defaultValue": "Wenita Forestry Products Q4 FY20 V2.xlsx"
					},
					"CurrentQuarterDate": {
						"type": "string",
						"defaultValue": "2020-06-30"
					},
					"Answers": {
						"type": "string",
						"defaultValue": "Answers_DWH_Export"
					},
					"CurrentRunDateTime": {
						"type": "string",
						"defaultValue": "2020-08-01"
					},
					"MasterUtcTag": {
						"type": "string",
						"defaultValue": "2020-08-28T06:05:53.4181322Z"
					},
					"MasterPipeline": {
						"type": "string",
						"defaultValue": "pipeline"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-10-01T02:53:48Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessOpsWorkbookTabAnswers_spl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Certificates tab",
				"activities": [
					{
						"name": "GetTableErrorCount",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) AS ERROR_COUNT FROM (\n SELECT DISTINCT Source_File FROM \n audit.OPS_Answers_Error \n WHERE Source_File = '@{pipeline().parameters.WorkbookName}'\n)x",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckConditionIfErrorExist",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetTableErrorCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@Equals(int(activity('GetTableErrorCount').output.firstRow.ERROR_COUNT), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "LoadValidatedDataset",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "DeleteOperationTableByAssetFundReportingDate",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "LoadXlsxAnswers_Step3_df",
											"type": "DataFlowReference",
											"parameters": {
												"WorkbookName": {
													"value": "'@{pipeline().parameters.WorkbookName}'",
													"type": "Expression"
												},
												"TabName": {
													"value": "'@{pipeline().parameters.Answers}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"SourceReadyLoad": {
													"ParquetFile": {
														"value": "@concat(pipeline().parameters.WorkbookName,'_',pipeline().parameters.Answers,'_',pipeline().parameters.CurrentQuarterDate,'_LoadReady')",
														"type": "Expression"
													}
												},
												"TargetRelational": {
													"Schema": {
														"value": "relational",
														"type": "Expression"
													},
													"TableName": {
														"value": "OPS_Answers",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "DeleteOperationTableByAssetFundReportingDate",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "LoadXlsxAnswers_Step2_df",
											"type": "DataFlowReference",
											"parameters": {
												"WorkbookName": {
													"value": "'@{pipeline().parameters.WorkbookName}'",
													"type": "Expression"
												},
												"TabName": {
													"value": "'@{pipeline().parameters.Answers}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"SourceReadyLoad": {
													"ParquetFile": {
														"value": "@concat(pipeline().parameters.WorkbookName,'_',pipeline().parameters.Answers,'_',pipeline().parameters.CurrentQuarterDate,'_LoadReady')",
														"type": "Expression"
													}
												},
												"TargetRelational": {
													"Schema": {
														"value": "relational",
														"type": "Expression"
													},
													"TableName": {
														"value": "OPS_Answers",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"WorkbookName": {
						"type": "string",
						"defaultValue": "Wenita Forestry Products Q4 FY20 V2.xlsx"
					},
					"CurrentQuarterDate": {
						"type": "string",
						"defaultValue": "2020-06-30"
					},
					"Answers": {
						"type": "string",
						"defaultValue": "Answers_DWH_Export"
					},
					"CurrentRunDateTime": {
						"type": "string",
						"defaultValue": "2020-08-01"
					},
					"MasterUtcTag": {
						"type": "string",
						"defaultValue": "2020-08-28T06:05:53.4181322Z"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-10-12T10:58:21Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessOpsWorkbookTabCertificates_pl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Certificates tab",
				"activities": [
					{
						"name": "ProcessExcelWorkbookTab",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "LoadXlsxCertificates_Step1_df",
								"type": "DataFlowReference",
								"parameters": {
									"MasterUtcTag": {
										"value": "'@{pipeline().parameters.MasterUtcTag}'",
										"type": "Expression"
									},
									"CurrentRunDateTime": {
										"value": "'@{pipeline().parameters.CurrentRunDateTime}'",
										"type": "Expression"
									},
									"WorkbookName": {
										"value": "'@{pipeline().parameters.WorkbookName}'",
										"type": "Expression"
									},
									"TabName": {
										"value": "'@{pipeline().parameters.Certifications}'",
										"type": "Expression"
									},
									"CurrentQuarterDate": {
										"value": "'@{pipeline().parameters.CurrentQuarterDate}'",
										"type": "Expression"
									},
									"MasterPipeline": {
										"value": "'@{pipeline().parameters.MasterPipeline}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"SourceDataTab": {
										"ParquetFile": {
											"value": "@concat(pipeline().parameters.WorkbookName,'_',pipeline().parameters.Certifications,'_',pipeline().parameters.CurrentQuarterDate,'_Extract')",
											"type": "Expression"
										}
									},
									"RelationalOpsCertificationType": {},
									"RelationalCertification": {},
									"TargetPersistentParquetInsert": {},
									"ErrorTable": {
										"Schema": {
											"value": "audit",
											"type": "Expression"
										},
										"TableName": {
											"value": "OPS_Certification_Error",
											"type": "Expression"
										}
									},
									"TargetPersistenParquetUpdate": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"WorkbookName": {
						"type": "string",
						"defaultValue": "Wenita Forestry Products Q4 FY20 V2.xlsx"
					},
					"CurrentQuarterDate": {
						"type": "string",
						"defaultValue": "2020-06-30"
					},
					"Certifications": {
						"type": "string",
						"defaultValue": "Certifications"
					},
					"CurrentRunDateTime": {
						"type": "string",
						"defaultValue": "2020-08-01"
					},
					"MasterUtcTag": {
						"type": "string",
						"defaultValue": "2020-08-28T06:05:53.4181322Z"
					},
					"MasterPipeline": {
						"type": "string",
						"defaultValue": "Wenita Forestry Products Q4 FY20 V2.xlsx-Certifications"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-10-01T02:53:48Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ProcessOpsWorkbookTabCertificates_spl')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Certificates tab",
				"activities": [
					{
						"name": "GetTableErrorCount",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT COUNT(*) AS ERROR_COUNT FROM (\n SELECT DISTINCT Source_File FROM \n audit.OPS_Certification_Error \n WHERE Source_File = '@{pipeline().parameters.WorkbookName}'\n)x",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQLtableGeneric_ds",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckConditionIfErrorExist",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetTableErrorCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@Equals(int(activity('GetTableErrorCount').output.firstRow.ERROR_COUNT), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "LoadValidatedDataset",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "DeleteExistingRowsForCurrentPeriod",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "LoadXlsxCertificates_Step3_df",
											"type": "DataFlowReference",
											"parameters": {
												"WorkbookName": {
													"value": "'@{pipeline().parameters.WorkbookName}'",
													"type": "Expression"
												},
												"TabName": {
													"value": "'@{pipeline().parameters.Certifications}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"SourceReadyLoad": {
													"ParquetFile": {
														"value": "@concat(pipeline().parameters.WorkbookName,'_',pipeline().parameters.Certifications,'_',pipeline().parameters.CurrentQuarterDate,'_LoadReady')",
														"type": "Expression"
													}
												},
												"TargetRelational": {
													"Schema": {
														"value": "relational",
														"type": "Expression"
													},
													"TableName": {
														"value": "OPS_Certification",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "UpdateValidatedDataset",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "LoadValidatedDataset",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "LoadXlsxCertificates_Step4_df",
											"type": "DataFlowReference",
											"parameters": {
												"WorkbookName": {
													"value": "'@{pipeline().parameters.WorkbookName}'",
													"type": "Expression"
												},
												"TabName": {
													"value": "'@{pipeline().parameters.Certifications}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"SourceUpdate": {
													"ParquetFile": {
														"value": "@concat(pipeline().parameters.WorkbookName,'_',pipeline().parameters.Certifications,'_',pipeline().parameters.CurrentQuarterDate,'_Update')",
														"type": "Expression"
													}
												},
												"TargetRelational": {
													"Schema": {
														"value": "relational",
														"type": "Expression"
													},
													"TableName": {
														"value": "OPS_Certification",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "DeleteExistingRowsForCurrentPeriod",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "LoadXlsxCertificates_Step2_df",
											"type": "DataFlowReference",
											"parameters": {
												"WorkbookName": {
													"value": "'@{pipeline().parameters.WorkbookName}'",
													"type": "Expression"
												},
												"TabName": {
													"value": "'@{pipeline().parameters.Certifications}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"SourceReadyLoad": {
													"ParquetFile": {
														"value": "@concat(pipeline().parameters.WorkbookName,'_',pipeline().parameters.Certifications,'_',pipeline().parameters.CurrentQuarterDate,'_LoadReady')",
														"type": "Expression"
													}
												},
												"TargetRelationalDelete": {
													"Schema": {
														"value": "relational",
														"type": "Expression"
													},
													"TableName": {
														"value": "OPS_Certification",
														"type": "Expression"
													}
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"WorkbookName": {
						"type": "string",
						"defaultValue": "Wenita Forestry Products Q4 FY20 V2.xlsx"
					},
					"CurrentQuarterDate": {
						"type": "string",
						"defaultValue": "30/09/2020"
					},
					"Certifications": {
						"type": "string",
						"defaultValue": "Certifications"
					},
					"CurrentRunDateTime": {
						"type": "string",
						"defaultValue": "2020-08-01"
					},
					"MasterUtcTag": {
						"type": "string",
						"defaultValue": "2020-08-28T06:05:53.4181322Z"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-10-12T10:58:21Z"
			},
			"dependsOn": []
		}
	]
}