{
	"name": "LoadXlsxContract_Step1_df",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ParquetPersistentOpsWithTabParam_ds",
						"type": "DatasetReference"
					},
					"name": "SourceDataTab"
				},
				{
					"dataset": {
						"referenceName": "SQLtableGeneric_ds",
						"type": "DatasetReference"
					},
					"name": "RelationalContractLkp"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ParquetPersistentOps_ds",
						"type": "DatasetReference"
					},
					"name": "TargetPersistentParquetInsert"
				},
				{
					"dataset": {
						"referenceName": "SQLtableGenericWithParam_ds",
						"type": "DatasetReference"
					},
					"name": "ErrorTable"
				},
				{
					"dataset": {
						"referenceName": "ParquetPersistentOps_ds",
						"type": "DatasetReference"
					},
					"name": "TargetPersistenParquetUpdate"
				}
			],
			"transformations": [
				{
					"name": "ValidateMandatoryColumns",
					"description": "ReportingDateCertificationIDValidateMsg is a test and should be considered as part of the conditional split Insert/Update activity"
				},
				{
					"name": "SegregateValidInvalidRows"
				},
				{
					"name": "SelectedColumnsOutputInsert"
				},
				{
					"name": "ConcatenateInvalidColumnsMessage"
				},
				{
					"name": "SelectedOutputColumnsError"
				},
				{
					"name": "GenerateRowNumber"
				},
				{
					"name": "ExcludeFirstRow"
				},
				{
					"name": "DateTypeTransform"
				},
				{
					"name": "SplitInsertAndUpdate",
					"description": "1. The condition assume that the records from the current reporting period are deleted first if any (asset id, fund id, current reporting period)\n2. Records where reporting period equal current reporting period (disregard certification id) are inserted/reinserted after delete in 1\n3. Remaining records are not from current reporting period and the certification ids must not be null. These are updated"
				},
				{
					"name": "SelectColumnsOutputUpdate"
				},
				{
					"name": "UpdateDatetimeValue"
				},
				{
					"name": "SelectContractLkp"
				},
				{
					"name": "LookupContract"
				}
			],
			"script": "parameters{\n\tMasterUtcTag as string,\n\tCurrentRunDateTime as string,\n\tWorkbookName as string,\n\tTabName as string,\n\tCurrentQuarterDate as string,\n\tMasterPipeline as string\n}\nsource(output(\n\t\tContract_ID as string,\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tReporting_Period as string,\n\t\tValidation_Flag as string,\n\t\tExecution_Date as string,\n\t\tTermination_Date as string,\n\t\tContracted_Party_Company_Name as string,\n\t\tEstimated_Maximum_Contract_Value_over_the_course_of_the_contract as string,\n\t\tContract_Currency as string,\n\t\tType_of_goods_or_services as string,\n\t\tExecuted_By_Entity_1 as string,\n\t\tExecuted_By_Entity_2 as string,\n\t\tExecuted_By_Entity_3 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tpartitionBy('hash', 1)) ~> SourceDataTab\nsource(output(\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tReporting_Period as date,\n\t\tExecution_Date as date,\n\t\tTermination_Date as date,\n\t\tCompany_Name as string,\n\t\tContract_Value as decimal(19,4),\n\t\tContract_Currency as string,\n\t\tContract_Type as string,\n\t\tExecuted_By_Entity1 as string,\n\t\tExecuted_By_Entity2 as string,\n\t\tExecuted_By_Entity3 as string,\n\t\tInsert_Datetime as timestamp,\n\t\tContract_ID as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT DISTINCT [Asset_ID]\\n      ,[Fund_ID]\\n      ,[Reporting_Period]\\n      ,[Execution_Date]\\n      ,[Termination_Date]\\n      ,[Company_Name]\\n      ,[Contract_Value]\\n      ,[Contract_Currency]\\n      ,[Contract_Type]\\n      ,[Executed_By_Entity1]\\n      ,[Executed_By_Entity2]\\n      ,[Executed_By_Entity3]\\n      ,[Insert_Datetime]\\n      ,[Contract_ID]\\n FROM [relational].[OPS_Contract]',\n\tformat: 'query') ~> RelationalContractLkp\nLookupContract derive(AssetReportingDateValidateMsg = iif(isNull(Asset_ID) || isNull(Fund_ID) || isNull(Reporting_Period), \"Invalid Asset or Reporting Period/\", \"\"),\n\t\tReportingDateContractIDValidateMsg = iif(iif(CurrentReportingPeriod != Reporting_Period, true(), false()) && isNull(Contract_ID),\"Null Contract ID for non-current Reporting Period/\",\"\"),\n\t\tLkpRelationalContractIDValidateMsg = iif(not(isNull(Contract_ID_Lkp)),\r\niif(equals(concat(Asset_ID_Lkp,Fund_ID_Lkp), concat(Asset_ID,Fund_ID)),\"\",\"Contract ID not belong to Asset/\"),\"\"),\n\t\tContractValueValidateMsg = iif(isNull(Estimated_Maximum_Contract_Value_over_the_course_of_the_contract_toDecimal), \"Contract Value/\", \"\"),\n\t\tExecutionDateValidateMsg = iif(not(isNull(Execution_Date)),iif(not(isNull(Execution_Date_toDate)),\"\",\"Execution Date/\"),\"Execution Date/\"),\n\t\tTerminationDateValidateMsg = iif(not(isNull(Termination_Date)),iif(not(isNull(Termination_Date_toDate)),\"\",\"Termination Date/\"),\"Termination Date/\"),\n\t\tTypeOfGoodsAndServiceValidateMsg = iif(isNull(Type_of_goods_or_services),\"Type of Goods and Services/\",\"\"),\n\t\tContractCurrencyValidateMsg = iif(isNull(Contract_Currency),\"Contract Currency/\",\"\"),\n\t\tEntity1ValidateMsg = iif(isNull(Executed_By_Entity_1),\"Entity 1/\",\"\")) ~> ValidateMandatoryColumns\nValidateMandatoryColumns split(length(concatWS('',AssetReportingDateValidateMsg,\r\nLkpRelationalContractIDValidateMsg,\r\nReportingDateContractIDValidateMsg,\r\nContractValueValidateMsg,\r\nExecutionDateValidateMsg,\r\nTerminationDateValidateMsg,\r\nTypeOfGoodsAndServiceValidateMsg,\r\nContractCurrencyValidateMsg,\r\nEntity1ValidateMsg)) == 0,\n\tdisjoint: false) ~> SegregateValidInvalidRows@(ValidRows, InvalidRows)\nSplitInsertAndUpdate@Insert select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tExecution_Date = Execution_Date_toDate,\n\t\tTermination_Date = Termination_Date_toDate,\n\t\tCompany_Name = Contracted_Party_Company_Name,\n\t\tContract_Value = Estimated_Maximum_Contract_Value_over_the_course_of_the_contract_toDecimal,\n\t\tContract_Currency,\n\t\tContract_Type = Type_of_goods_or_services,\n\t\tExecuted_By_Entity1 = Executed_By_Entity_1,\n\t\tExecuted_By_Entity2 = Executed_By_Entity_2,\n\t\tExecuted_By_Entity3 = Executed_By_Entity_3,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tProcess_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectedColumnsOutputInsert\nSegregateValidInvalidRows@InvalidRows derive(ConcatenatedMessage = concat(AssetReportingDateValidateMsg, ReportingDateContractIDValidateMsg, LkpRelationalContractIDValidateMsg, ContractValueValidateMsg,\r\nExecutionDateValidateMsg,TerminationDateValidateMsg,TypeOfGoodsAndServiceValidateMsg,ContractCurrencyValidateMsg,Entity1ValidateMsg)) ~> ConcatenateInvalidColumnsMessage\nConcatenateInvalidColumnsMessage select(mapColumn(\n\t\tContract_ID,\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tExecution_Date,\n\t\tTermination_Date,\n\t\tCompany_Name = Contracted_Party_Company_Name,\n\t\tContract_Value = Estimated_Maximum_Contract_Value_over_the_course_of_the_contract,\n\t\tContract_Currency,\n\t\tContract_Type = Type_of_goods_or_services,\n\t\tExecuted_By_Entity1 = Executed_By_Entity_1,\n\t\tExecuted_By_Entity2 = Executed_By_Entity_2,\n\t\tExecuted_By_Entity3 = Executed_By_Entity_3,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tSource_File = Work_Book,\n\t\tSource_Sub_File = Work_Sheet,\n\t\tProcess_Name,\n\t\tError_Desc = ConcatenatedMessage\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectedOutputColumnsError\nDateTypeTransform keyGenerate(output(RowNumber as long),\n\tstartAt: 1L,\n\tpartitionBy('hash', 1)) ~> GenerateRowNumber\nGenerateRowNumber filter(RowNumber > 1 && \r\n(not(isNull(Execution_Date)) || not(isNull(Termination_Date)) || \r\nnot(isNull(Contracted_Party_Company_Name)) || not(isNull(Estimated_Maximum_Contract_Value_over_the_course_of_the_contract)) || not(isNull(Contract_Currency)) || \r\nnot(isNull(Type_of_goods_or_services)) || not(isNull(Executed_By_Entity_1)) || not(isNull(Executed_By_Entity_2)) || not(isNull(Executed_By_Entity_3))\r\n)) ~> ExcludeFirstRow\nSourceDataTab derive(Reporting_Period = toDate(Reporting_Period),\n\t\tExecution_Date_toDate = toDate(Execution_Date),\n\t\tTermination_Date_toDate = toDate(Termination_Date),\n\t\tEstimated_Maximum_Contract_Value_over_the_course_of_the_contract_toDecimal = toDecimal(Estimated_Maximum_Contract_Value_over_the_course_of_the_contract, 19, 4),\n\t\tContract_ID = toInteger(Contract_ID),\n\t\tInsert_Datetime = fromUTC(currentUTC(), 'Australia/Sydney'),\n\t\tUpdate_Datetime = toTimestamp('9999-12-31 00:00:00'),\n\t\tWork_Book = $WorkbookName,\n\t\tWork_Sheet = $TabName,\n\t\tProcess_Name = concatWS('-',$MasterPipeline,$WorkbookName,$TabName),\n\t\tCurrentReportingPeriod = toDate($CurrentQuarterDate)) ~> DateTypeTransform\nSegregateValidInvalidRows@ValidRows split(equals(Reporting_Period, CurrentReportingPeriod),\n\tdisjoint: false) ~> SplitInsertAndUpdate@(Insert, Update)\nUpdateDatetimeValue select(mapColumn(\n\t\tContract_ID,\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tExecution_Date = Execution_Date_toDate,\n\t\tTermination_Date = Termination_Date_toDate,\n\t\tCompany_Name = Contracted_Party_Company_Name,\n\t\tContract_Value = Estimated_Maximum_Contract_Value_over_the_course_of_the_contract_toDecimal,\n\t\tContract_Currency,\n\t\tContract_Type = Type_of_goods_or_services,\n\t\tExecuted_By_Entity1 = Executed_By_Entity_1,\n\t\tExecuted_By_Entity2 = Executed_By_Entity_2,\n\t\tExecuted_By_Entity3 = Executed_By_Entity_3,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tProcess_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumnsOutputUpdate\nSplitInsertAndUpdate@Update derive(Update_Datetime = fromUTC(currentUTC(), 'Australia/Sydney'),\n\t\tInsert_Datetime = Insert_Datetime_Lkp) ~> UpdateDatetimeValue\nRelationalContractLkp select(mapColumn(\n\t\tAsset_ID_Lkp = Asset_ID,\n\t\tFund_ID_Lkp = Fund_ID,\n\t\tReporting_Period_Lkp = Reporting_Period,\n\t\tExecution_Date_Lkp = Execution_Date,\n\t\tTermination_Date_Lkp = Termination_Date,\n\t\tCompany_Name_Lkp = Company_Name,\n\t\tContract_Value_Lkp = Contract_Value,\n\t\tContract_Currency_Lkp = Contract_Currency,\n\t\tContract_Type_Lkp = Contract_Type,\n\t\tExecuted_By_Entity1_Lkp = Executed_By_Entity1,\n\t\tExecuted_By_Entity2_Lkp = Executed_By_Entity2,\n\t\tExecuted_By_Entity3_Lkp = Executed_By_Entity3,\n\t\tInsert_Datetime_Lkp = Insert_Datetime,\n\t\tContract_ID_Lkp = Contract_ID\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectContractLkp\nExcludeFirstRow, SelectContractLkp lookup(Contract_ID == Contract_ID_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupContract\nSelectedColumnsOutputInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concatWS(\"_\", $WorkbookName, $TabName,$CurrentQuarterDate,'LoadReady'))],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tExecution_Date,\n\t\tTermination_Date,\n\t\tCompany_Name,\n\t\tContract_Value,\n\t\tContract_Currency,\n\t\tContract_Type,\n\t\tExecuted_By_Entity1,\n\t\tExecuted_By_Entity2,\n\t\tExecuted_By_Entity3,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tProcess_Name\n\t),\n\tpartitionBy('hash', 1)) ~> TargetPersistentParquetInsert\nSelectedOutputColumnsError sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tContract_ID,\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tExecution_Date,\n\t\tTermination_Date,\n\t\tCompany_Name,\n\t\tContract_Value,\n\t\tContract_Currency,\n\t\tContract_Type,\n\t\tExecuted_By_Entity1,\n\t\tExecuted_By_Entity2,\n\t\tExecuted_By_Entity3,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tSource_File,\n\t\tSource_Sub_File,\n\t\tProcess_Name,\n\t\tError_Desc\n\t),\n\tpartitionBy('hash', 1)) ~> ErrorTable\nSelectColumnsOutputUpdate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concatWS(\"_\", $WorkbookName, $TabName,$CurrentQuarterDate,'Update'))],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tContract_ID,\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tExecution_Date,\n\t\tTermination_Date,\n\t\tCompany_Name,\n\t\tContract_Value,\n\t\tContract_Currency,\n\t\tContract_Type,\n\t\tExecuted_By_Entity1,\n\t\tExecuted_By_Entity2,\n\t\tExecuted_By_Entity3,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tProcess_Name\n\t),\n\tpartitionBy('hash', 1)) ~> TargetPersistenParquetUpdate"
		}
	}
}