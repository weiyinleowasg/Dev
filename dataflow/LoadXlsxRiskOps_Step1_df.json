{
	"name": "LoadXlsxRiskOps_Step1_df",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ParquetPersistentOpsWithTabParam_ds",
						"type": "DatasetReference"
					},
					"name": "SourceDataTab"
				},
				{
					"dataset": {
						"referenceName": "SQLtableGeneric_ds",
						"type": "DatasetReference"
					},
					"name": "RelationalRiskOpsRegister"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ParquetPersistentOps_ds",
						"type": "DatasetReference"
					},
					"name": "TargetPersistentParquetInsert"
				},
				{
					"dataset": {
						"referenceName": "SQLtableGenericWithParam_ds",
						"type": "DatasetReference"
					},
					"name": "ErrorTable"
				},
				{
					"dataset": {
						"referenceName": "ParquetPersistentOps_ds",
						"type": "DatasetReference"
					},
					"name": "TargetPersistenParquetUpdate"
				}
			],
			"transformations": [
				{
					"name": "ValidateMandatoryColumns",
					"description": "ReportingDateCertificationIDValidateMsg is a test and should be considered as part of the conditional split Insert/Update activity"
				},
				{
					"name": "SegregateValidInvalidRows"
				},
				{
					"name": "SelectedColumnsOutputInsert"
				},
				{
					"name": "ConcatenateInvalidColumnsMessage"
				},
				{
					"name": "SelectedOutputColumnsError"
				},
				{
					"name": "GenerateRowNumber"
				},
				{
					"name": "ExcludeFirstRowandEmpty"
				},
				{
					"name": "DateTypeTransform"
				},
				{
					"name": "SplitInsertAndUpdate",
					"description": "1. The condition assume that the records from the current reporting period are deleted first if any (asset id, fund id, current reporting period)\n2. Records where reporting period equal current reporting period (disregard certification id) are inserted/reinserted after delete in 1\n3. Remaining records are not from current reporting period and the certification ids must not be null. These are updated"
				},
				{
					"name": "SelectColumnsOutputUpdate"
				},
				{
					"name": "UpdateDatetimeValue"
				},
				{
					"name": "LookupRiskOp"
				},
				{
					"name": "SelectRiskOpsLookup"
				}
			],
			"script": "parameters{\n\tMasterUtcTag as string,\n\tCurrentRunDateTime as string,\n\tWorkbookName as string,\n\tTabName as string,\n\tCurrentQuarterDate as string,\n\tMasterPipeline as string\n}\nsource(output(\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tReporting_Period as string,\n\t\tRisk_Opp_ID as string,\n\t\tValidation_Flag as string,\n\t\tRisk_Sub_Class as string,\n\t\tRisk_Class as string,\n\t\tRisk_Description as string,\n\t\tActions_and_Controls as string,\n\t\tDate_Lodged as string,\n\t\tLikelihood as string,\n\t\tSeverity as string,\n\t\tInherent_Risk_Rating as string,\n\t\tEliminate_or_Mitigate as string,\n\t\tResidual_Likelihood as string,\n\t\tResidual_Severity as string,\n\t\tResidual_Risk_Rating as string,\n\t\tFuture_Controls as string,\n\t\tPerson_Responsible as string,\n\t\tDate_Closed as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tpartitionBy('hash', 1)) ~> SourceDataTab\nsource(output(\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tReporting_Period as date,\n\t\tRisk_Ops_Sub_Class_Code as string,\n\t\tRisk_Ops_Descripton as string,\n\t\tActions_Controls as string,\n\t\tDate_Lodged as date,\n\t\tLikelihood as short,\n\t\tSeverity as short,\n\t\tInherent_Risk_Rating as short,\n\t\tEliminate_Mitigate as string,\n\t\tResidual_Likelihood as short,\n\t\tResidual_Severity as short,\n\t\tResidual_Risk_Rating as short,\n\t\tFuture_Controls as string,\n\t\tPerson_Responsible as string,\n\t\tDate_Closed as date,\n\t\tQuarterly_Incidents as integer,\n\t\tRisk_Opps_Flag as string,\n\t\tInsert_Datetime as timestamp,\n\t\tRisk_Opp_ID as integer,\n\t\tRisk_Opp_Class as string,\n\t\tRisk_Opp_Sub_Class as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT DISTINCT [Asset_ID]\\n      ,[Fund_ID]\\n      ,[Reporting_Period]\\n      ,[Risk_Ops_Sub_Class_Code]\\n      ,[Risk_Ops_Descripton]\\n      ,[Actions_Controls]\\n      ,[Date_Lodged]\\n      ,[Likelihood]\\n      ,[Severity]\\n      ,[Inherent_Risk_Rating]\\n      ,[Eliminate_Mitigate]\\n      ,[Residual_Likelihood]\\n      ,[Residual_Severity]\\n      ,[Residual_Risk_Rating]\\n      ,[Future_Controls]\\n      ,[Person_Responsible]\\n      ,[Date_Closed]\\n      ,[Quarterly_Incidents]\\n      ,[Risk_Opps_Flag]\\n      ,[Insert_Datetime]\\n      ,[Risk_Opp_ID]\\n      ,[Risk_Opp_Class]\\n      ,[Risk_Opp_Sub_Class]\\n  FROM [relational].[OPS_Risk_Opportunity_Register]',\n\tformat: 'query') ~> RelationalRiskOpsRegister\nLookupRiskOp derive(Risk_Class_Validate_Msg = iif(isNull(Risk_Class),'Risk Class/',''),\n\t\tDate_Lodged_Validate_Msg = iif(isNull(Date_Lodged_toDate),'Date Lodged/',''),\n\t\tAssetReportingDateValidateMsg = iif(isNull(Asset_ID) || isNull(Fund_ID) || isNull(Reporting_Period), \"Invalid Asset or Reporting Period/\", \"\"),\n\t\tReportingDateContractIDValidateMsg = iif(iif(CurrentReportingPeriod != Reporting_Period, true(), false()) && isNull(Risk_Opp_ID),\"Null Contract ID for non-current Reporting Period/\",\"\"),\n\t\tLkpRelationalContractIDValidateMsg = iif(not(isNull(Risk_Opp_ID_Lkp)),\r\niif(equals(concat(Asset_ID_Lkp,Fund_ID_Lkp), concat(Asset_ID,Fund_ID)),\"\",\"Contract ID not belong to Asset/\"),\"\")) ~> ValidateMandatoryColumns\nValidateMandatoryColumns split(length(concatWS('',Risk_Class_Validate_Msg,Date_Lodged_Validate_Msg,AssetReportingDateValidateMsg,ReportingDateContractIDValidateMsg,LkpRelationalContractIDValidateMsg)) == 0,\n\tdisjoint: false) ~> SegregateValidInvalidRows@(ValidRows, InvalidRows)\nSplitInsertAndUpdate@Insert select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tRisk_Opp_Sub_Class = Risk_Sub_Class,\n\t\tRisk_Opp_Class = Risk_Class,\n\t\tRisk_Ops_Descripton = Risk_Description,\n\t\tActions_Controls = Actions_and_Controls,\n\t\tDate_Lodged = Date_Lodged_toDate,\n\t\tLikelihood,\n\t\tSeverity,\n\t\tInherent_Risk_Rating,\n\t\tEliminate_Mitigate = Eliminate_or_Mitigate,\n\t\tResidual_Likelihood,\n\t\tResidual_Severity,\n\t\tResidual_Risk_Rating,\n\t\tFuture_Controls,\n\t\tPerson_Responsible,\n\t\tDate_Closed,\n\t\tInsert_Datetime,\n\t\tProcess_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectedColumnsOutputInsert\nSegregateValidInvalidRows@InvalidRows derive(ConcatenatedMessage = concat(Risk_Class_Validate_Msg,Date_Lodged_Validate_Msg,AssetReportingDateValidateMsg,ReportingDateContractIDValidateMsg,LkpRelationalContractIDValidateMsg)) ~> ConcatenateInvalidColumnsMessage\nConcatenateInvalidColumnsMessage select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tRisk_Opp_ID,\n\t\tRisk_Ops_Sub_Class = Risk_Sub_Class,\n\t\tRisk_Opp_Class = Risk_Class,\n\t\tRisk_Ops_Descripton = Risk_Description,\n\t\tActions_Controls = Actions_and_Controls,\n\t\tDate_Lodged,\n\t\tLikelihood,\n\t\tSeverity,\n\t\tInherent_Risk_Rating,\n\t\tEliminate_Mitigate = Eliminate_or_Mitigate,\n\t\tResidual_Likelihood,\n\t\tResidual_Severity,\n\t\tResidual_Risk_Rating,\n\t\tFuture_Controls,\n\t\tPerson_Responsible,\n\t\tDate_Closed,\n\t\tInsert_Datetime,\n\t\tSource_File = Work_Book,\n\t\tSource_Sub_File = Work_Sheet,\n\t\tProcess_Name,\n\t\tError_Desc = ConcatenatedMessage\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectedOutputColumnsError\nDateTypeTransform keyGenerate(output(RowNumber as long),\n\tstartAt: 1L,\n\tpartitionBy('hash', 1)) ~> GenerateRowNumber\nGenerateRowNumber filter(RowNumber > 1 && \r\n(not(isNull(Risk_Sub_Class)) || not(isNull(Risk_Class)) || \r\nnot(isNull(Risk_Description)) || not(isNull(Actions_and_Controls)) || not(isNull(Date_Lodged)) || \r\nnot(isNull(Likelihood)) || not(isNull(Severity)) || not(isNull(Inherent_Risk_Rating)) || not(isNull(Eliminate_or_Mitigate)) || \r\nnot(isNull(Residual_Likelihood)) || not(isNull(Residual_Severity)) || not(isNull(Residual_Risk_Rating)) || \r\nnot(isNull(Future_Controls)) || not(isNull(Person_Responsible)) || not(isNull(Date_Closed))\r\n)) ~> ExcludeFirstRowandEmpty\nSourceDataTab derive(Risk_Opp_ID = toInteger(Risk_Opp_ID),\n\t\tReporting_Period = toDate(Reporting_Period),\n\t\tLikelihood = toShort(Likelihood),\n\t\tSeverity = toShort(Severity),\n\t\tInherent_Risk_Rating = toShort(Inherent_Risk_Rating),\n\t\tResidual_Likelihood = toShort(Residual_Likelihood),\n\t\tResidual_Severity = toShort(Residual_Severity),\n\t\tResidual_Risk_Rating = toShort(Residual_Risk_Rating),\n\t\tDate_Closed = toDate(Date_Closed),\n\t\tDate_Lodged_toDate = toDate(Date_Lodged),\n\t\tInsert_Datetime = fromUTC(currentUTC(), 'Australia/Sydney'),\n\t\tUpdate_Datetime = toTimestamp('9999-12-31 00:00:00'),\n\t\tWork_Book = $WorkbookName,\n\t\tWork_Sheet = $TabName,\n\t\tProcess_Name = concatWS('-',$MasterPipeline,$WorkbookName,$TabName),\n\t\tCurrentReportingPeriod = toDate($CurrentQuarterDate)) ~> DateTypeTransform\nSegregateValidInvalidRows@ValidRows split(equals(Reporting_Period, CurrentReportingPeriod),\n\tdisjoint: false) ~> SplitInsertAndUpdate@(Insert, Update)\nUpdateDatetimeValue select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tRisk_Opp_ID,\n\t\tRisk_Opp_Sub_Class = Risk_Sub_Class,\n\t\tRisk_Opp_Class = Risk_Class,\n\t\tRisk_Ops_Descripton = Risk_Description,\n\t\tActions_Controls = Actions_and_Controls,\n\t\tDate_Lodged = Date_Lodged_toDate,\n\t\tLikelihood,\n\t\tSeverity,\n\t\tInherent_Risk_Rating,\n\t\tEliminate_Mitigate = Eliminate_or_Mitigate,\n\t\tResidual_Likelihood,\n\t\tResidual_Severity,\n\t\tResidual_Risk_Rating,\n\t\tFuture_Controls,\n\t\tPerson_Responsible,\n\t\tDate_Closed,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tProcess_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumnsOutputUpdate\nSplitInsertAndUpdate@Update derive(Update_Datetime = fromUTC(currentUTC(), 'Australia/Sydney')) ~> UpdateDatetimeValue\nExcludeFirstRowandEmpty, SelectRiskOpsLookup lookup(Risk_Opp_ID == Risk_Opp_ID_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupRiskOp\nRelationalRiskOpsRegister select(mapColumn(\n\t\tAsset_ID_Lkp = Asset_ID,\n\t\tFund_ID_Lkp = Fund_ID,\n\t\tReporting_Period_Lkp = Reporting_Period,\n\t\tRisk_Ops_Sub_Class_Code_Lkp = Risk_Ops_Sub_Class_Code,\n\t\tRisk_Ops_Descripton_Lkp = Risk_Ops_Descripton,\n\t\tActions_Controls_Lkp = Actions_Controls,\n\t\tDate_Lodged_Lkp = Date_Lodged,\n\t\tLikelihood_Lkp = Likelihood,\n\t\tSeverity_Lkp = Severity,\n\t\tInherent_Risk_Rating_Lkp = Inherent_Risk_Rating,\n\t\tEliminate_Mitigate_Lkp = Eliminate_Mitigate,\n\t\tResidual_Likelihood_Lkp = Residual_Likelihood,\n\t\tResidual_Severity_Lkp = Residual_Severity,\n\t\tResidual_Risk_Rating_Lkp = Residual_Risk_Rating,\n\t\tFuture_Controls_Lkp = Future_Controls,\n\t\tPerson_Responsible_Lkp = Person_Responsible,\n\t\tDate_Closed_Lkp = Date_Closed,\n\t\tQuarterly_Incidents_Lkp = Quarterly_Incidents,\n\t\tRisk_Opps_Flag_Lkp = Risk_Opps_Flag,\n\t\tInsert_Datetime_Lkp = Insert_Datetime,\n\t\tRisk_Opp_ID_Lkp = Risk_Opp_ID,\n\t\tRisk_Opp_Class_Lkp = Risk_Opp_Class,\n\t\tRisk_Opp_Sub_Class_Lkp = Risk_Opp_Sub_Class\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRiskOpsLookup\nSelectedColumnsOutputInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concatWS(\"_\", $WorkbookName, $TabName,$CurrentQuarterDate,'LoadReady'))],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tRisk_Opp_Sub_Class,\n\t\tRisk_Opp_Class,\n\t\tRisk_Ops_Descripton,\n\t\tActions_Controls,\n\t\tDate_Lodged,\n\t\tLikelihood,\n\t\tSeverity,\n\t\tInherent_Risk_Rating,\n\t\tEliminate_Mitigate,\n\t\tResidual_Likelihood,\n\t\tResidual_Severity,\n\t\tResidual_Risk_Rating,\n\t\tFuture_Controls,\n\t\tPerson_Responsible,\n\t\tDate_Closed,\n\t\tInsert_Datetime,\n\t\tProcess_Name\n\t),\n\tpartitionBy('hash', 1)) ~> TargetPersistentParquetInsert\nSelectedOutputColumnsError sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tRisk_Opp_ID,\n\t\tRisk_Ops_Sub_Class,\n\t\tRisk_Opp_Class,\n\t\tRisk_Ops_Descripton,\n\t\tActions_Controls,\n\t\tDate_Lodged,\n\t\tLikelihood,\n\t\tSeverity,\n\t\tInherent_Risk_Rating,\n\t\tEliminate_Mitigate,\n\t\tResidual_Likelihood,\n\t\tResidual_Severity,\n\t\tResidual_Risk_Rating,\n\t\tFuture_Controls,\n\t\tPerson_Responsible,\n\t\tDate_Closed,\n\t\tInsert_Datetime,\n\t\tSource_File,\n\t\tSource_Sub_File,\n\t\tProcess_Name,\n\t\tError_Desc\n\t),\n\tpartitionBy('hash', 1)) ~> ErrorTable\nSelectColumnsOutputUpdate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concatWS(\"_\", $WorkbookName, $TabName,$CurrentQuarterDate,'Update'))],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tRisk_Opp_ID,\n\t\tRisk_Opp_Sub_Class,\n\t\tRisk_Opp_Class,\n\t\tRisk_Ops_Descripton,\n\t\tActions_Controls,\n\t\tDate_Lodged,\n\t\tLikelihood,\n\t\tSeverity,\n\t\tInherent_Risk_Rating,\n\t\tEliminate_Mitigate,\n\t\tResidual_Likelihood,\n\t\tResidual_Severity,\n\t\tResidual_Risk_Rating,\n\t\tFuture_Controls,\n\t\tPerson_Responsible,\n\t\tDate_Closed,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tProcess_Name\n\t),\n\tpartitionBy('hash', 1)) ~> TargetPersistenParquetUpdate"
		}
	}
}