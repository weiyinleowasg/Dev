{
	"name": "LoadMktDimDataSource_InsertUpdate_df",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CSVgenericWithParameter_ds",
						"type": "DatasetReference"
					},
					"name": "ReadSource"
				},
				{
					"dataset": {
						"referenceName": "SQLtableGeneric_ds",
						"type": "DatasetReference"
					},
					"name": "DatamartDimDataSourceLkp"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SQLtableGenericWithParam_ds",
						"type": "DatasetReference"
					},
					"name": "TargetDim"
				},
				{
					"dataset": {
						"referenceName": "SQLtableGenericWithParam_ds",
						"type": "DatasetReference"
					},
					"name": "ErrorTable"
				}
			],
			"transformations": [
				{
					"name": "SelectDimDataSourceLkp"
				},
				{
					"name": "DataTransformation"
				},
				{
					"name": "CheckDimensionRecordExist"
				},
				{
					"name": "AddAdditionalAudit"
				},
				{
					"name": "AlterRowInsertUpdate"
				},
				{
					"name": "CheckInputRecord"
				},
				{
					"name": "AddErrorDetail"
				},
				{
					"name": "RemoveBlankRow"
				},
				{
					"name": "GetNewOrModified"
				},
				{
					"name": "RemoveDuplicate"
				},
				{
					"name": "ReplaceNullToUndefined"
				}
			],
			"script": "parameters{\n\tGeneratedBatchDate as string,\n\tWorkbookName as string,\n\tWorksheetName as string,\n\tMasterPipelineName as string\n}\nsource(output(\n\t\t{Source Metric} as string,\n\t\t{Source Name} as string,\n\t\t{Source Type} as string,\n\t\t{Source Link} as string,\n\t\t{Source Data Type} as string,\n\t\t{Data Process Type} as string,\n\t\t{Source Status} as string,\n\t\tFrequency as string,\n\t\t{Confidence Level} as string,\n\t\t{Person Responsible} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> ReadSource\nsource(output(\n\t\tMetric_Short_Name as string,\n\t\tSource_Name as string,\n\t\tSource_Type as string,\n\t\tSource_Link as string,\n\t\tSource_Data_Type as string,\n\t\tData_Process_Type as string,\n\t\tSource_Status as string,\n\t\tFrequency as string,\n\t\tConfidence_Level as string,\n\t\tPerson_Responsible as string,\n\t\tInsert_DateTime as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT DISTINCT\\n       [Metric_Short_Name]\\n      ,[Source_Name]\\n      ,[Source_Type]\\n      ,[Source_Link]\\n      ,[Source_Data_Type]\\n      ,[Data_Process_Type]\\n      ,[Source_Status]\\n      ,[Frequency]\\n      ,[Confidence_Level]\\n      ,[Person_Responsible]\\n      ,[Insert_DateTime]\\nFROM [datamart].[Dim_Data_Source]\\nWHERE Data_Source_Id != -1',\n\tformat: 'query') ~> DatamartDimDataSourceLkp\nDatamartDimDataSourceLkp select(mapColumn(\n\t\tMetric_Short_Name_Lkp = Metric_Short_Name,\n\t\tSource_Name_Lkp = Source_Name,\n\t\tSource_Type_Lkp = Source_Type,\n\t\tSource_Link_Lkp = Source_Link,\n\t\tSource_Data_Type_Lkp = Source_Data_Type,\n\t\tData_Process_Type_Lkp = Data_Process_Type,\n\t\tSource_Status_Lkp = Source_Status,\n\t\tFrequency_Lkp = Frequency,\n\t\tConfidence_Level_Lkp = Confidence_Level,\n\t\tPerson_Responsible_Lkp = Person_Responsible,\n\t\tInsert_DateTime_Lkp = Insert_DateTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimDataSourceLkp\nReadSource derive(Source_File = concat($WorkbookName,'-', $WorksheetName),\n\t\tBatch_ID = replace(replace(replace($GeneratedBatchDate, \"-\", \"\"),\":\",\"\"),\" \",\"\"),\n\t\tProcess_Name = $MasterPipelineName) ~> DataTransformation\nRemoveDuplicate, SelectDimDataSourceLkp lookup({Source Metric} == Metric_Short_Name_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> CheckDimensionRecordExist\nGetNewOrModified derive(InsertUpdateFlag = iif(isNull(Metric_Short_Name_Lkp), \"I\", \"U\"),\n\t\tInsert_DateTime = iif(isNull(Metric_Short_Name_Lkp), fromUTC(currentUTC(), 'Australia/Sydney'), Insert_DateTime_Lkp),\n\t\tUpdate_DateTime = iif(isNull(Metric_Short_Name_Lkp), toTimestamp(\"\"), fromUTC(currentUTC(), 'Australia/Sydney'))) ~> AddAdditionalAudit\nAddAdditionalAudit alterRow(insertIf(equals(InsertUpdateFlag,\"I\")),\n\tupdateIf(equals(InsertUpdateFlag,\"U\"))) ~> AlterRowInsertUpdate\nDataTransformation split(not(isNull({Source Metric})),\n\tdisjoint: false) ~> CheckInputRecord@(Valid, Invalid)\nRemoveBlankRow derive(Error_Desc = toString(\"Source Metric cannot be empty\"),\n\t\tInsert_Datetime = fromUTC(currentUTC(), 'Australia/Sydney')) ~> AddErrorDetail\nCheckInputRecord@Invalid filter(not(isNull({Source Metric})) || not(isNull({Source Name})) || not(isNull({Source Type})) || not(isNull({Source Link})) || \r\nnot(isNull({Source Data Type})) || not(isNull({Data Process Type})) || not(isNull({Source Status})) || not(isNull(Frequency)) || \r\nnot(isNull({Confidence Level})) || not(isNull({Person Responsible}))) ~> RemoveBlankRow\nCheckDimensionRecordExist filter(isNull(Metric_Short_Name_Lkp) || \r\nnotEquals({Source Name}, Source_Name_Lkp) || \r\nnotEquals({Source Type}, Source_Type_Lkp) || \r\nnotEquals({Source Link}, Source_Link_Lkp) || \r\nnotEquals({Source Data Type}, Source_Data_Type_Lkp) || \r\nnotEquals({Data Process Type}, Data_Process_Type_Lkp) || \r\nnotEquals({Source Status}, Source_Status_Lkp) || \r\nnotEquals(Frequency, Frequency_Lkp) || \r\nnotEquals({Confidence Level}, Confidence_Level_Lkp) || \r\nnotEquals({Person Responsible}, Person_Responsible_Lkp)) ~> GetNewOrModified\nReplaceNullToUndefined aggregate(groupBy({Source Metric},\n\t\t{Source Name},\n\t\t{Source Type},\n\t\t{Source Link},\n\t\t{Source Data Type},\n\t\t{Data Process Type},\n\t\t{Source Status},\n\t\tFrequency,\n\t\t{Confidence Level},\n\t\t{Person Responsible},\n\t\tSource_File,\n\t\tBatch_ID,\n\t\tProcess_Name),\n\tDuplicateCount = count()) ~> RemoveDuplicate\nCheckInputRecord@Valid derive({Source Name} = iifNull({Source Name}, \"Undefined\"),\n\t\t{Source Type} = iifNull({Source Type}, \"Undefined\"),\n\t\t{Source Link} = iifNull({Source Link}, \"Undefined\"),\n\t\t{Source Data Type} = iifNull({Source Data Type}, \"Undefined\"),\n\t\t{Data Process Type} = iifNull({Data Process Type}, \"Undefined\"),\n\t\t{Source Status} = iifNull({Source Status}, \"Undefined\"),\n\t\tFrequency = iifNull(Frequency, \"Undefined\"),\n\t\t{Confidence Level} = iifNull({Confidence Level}, \"Undefined\"),\n\t\t{Person Responsible} = iifNull({Person Responsible}, \"Undefined\")) ~> ReplaceNullToUndefined\nAlterRowInsertUpdate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['Metric_Short_Name'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tMetric_Short_Name = {Source Metric},\n\t\tSource_Name = {Source Name},\n\t\tSource_Type = {Source Type},\n\t\tSource_Link = {Source Link},\n\t\tSource_Data_Type = {Source Data Type},\n\t\tData_Process_Type = {Data Process Type},\n\t\tSource_Status = {Source Status},\n\t\tFrequency,\n\t\tConfidence_Level = {Confidence Level},\n\t\tPerson_Responsible = {Person Responsible},\n\t\tSource_File,\n\t\tBatch_ID,\n\t\tProcess_Name,\n\t\tInsert_DateTime,\n\t\tUpdate_DateTime\n\t),\n\tpartitionBy('hash', 1)) ~> TargetDim\nAddErrorDetail sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tMetric_Short_Name = {Source Metric},\n\t\tSource_Name = {Source Name},\n\t\tSource_Type = {Source Type},\n\t\tSource_Link = {Source Link},\n\t\tSource_Data_Type = {Source Data Type},\n\t\tData_Process_Type = {Data Process Type},\n\t\tSource_Status = {Source Status},\n\t\tFrequency,\n\t\tConfidence_Level = {Confidence Level},\n\t\tPerson_Responsible = {Person Responsible},\n\t\tSource_File,\n\t\tProcess_Name,\n\t\tError_Desc,\n\t\tInsert_Datetime\n\t)) ~> ErrorTable"
		}
	}
}