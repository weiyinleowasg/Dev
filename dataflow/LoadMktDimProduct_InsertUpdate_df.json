{
	"name": "LoadMktDimProduct_InsertUpdate_df",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CSVgenericWithParameter_ds",
						"type": "DatasetReference"
					},
					"name": "ReadSource"
				},
				{
					"dataset": {
						"referenceName": "SQLtableGeneric_ds",
						"type": "DatasetReference"
					},
					"name": "DatamartDimProductLkp"
				},
				{
					"dataset": {
						"referenceName": "SQLtableGeneric_ds",
						"type": "DatasetReference"
					},
					"name": "DatamartSpeciesLkp"
				},
				{
					"dataset": {
						"referenceName": "SQLtableGeneric_ds",
						"type": "DatasetReference"
					},
					"name": "RelationalChartOfAccountLkp"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SQLtableGenericWithParam_ds",
						"type": "DatasetReference"
					},
					"name": "TargetDim"
				},
				{
					"dataset": {
						"referenceName": "SQLtableGenericWithParam_ds",
						"type": "DatasetReference"
					},
					"name": "ErrorTable"
				}
			],
			"transformations": [
				{
					"name": "SelectDimProductLkp"
				},
				{
					"name": "DataTransformation"
				},
				{
					"name": "CheckDimensionRecordExist"
				},
				{
					"name": "AddAdditionalAudit"
				},
				{
					"name": "AlterRowInsertUpdate"
				},
				{
					"name": "CheckInputRecord"
				},
				{
					"name": "AddErrorDetail"
				},
				{
					"name": "RemoveBlankRow"
				},
				{
					"name": "GetNewOrModified"
				},
				{
					"name": "RemoveDuplicate"
				},
				{
					"name": "ReplaceNullToUndefined"
				},
				{
					"name": "SelectDimSpeciesLkp"
				},
				{
					"name": "SelectRelationalCoaLkp"
				},
				{
					"name": "LookupDimSpecies"
				},
				{
					"name": "LookupChartOfAccount"
				}
			],
			"script": "parameters{\n\tGeneratedBatchDate as string,\n\tWorkbookName as string,\n\tWorksheetName as string,\n\tMasterPipelineName as string\n}\nsource(output(\n\t\t{Product Code} as string,\n\t\t{Product Type} as string,\n\t\t{Product Global Grade} as string,\n\t\t{Product Desc} as string,\n\t\t{GL Code} as string,\n\t\t{Species Code} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> ReadSource\nsource(output(\n\t\tProduct_Code as string,\n\t\tProduct_Type as string,\n\t\tProduct_Global_Grade as string,\n\t\tProduct_Desc as string,\n\t\tGL_Code as string,\n\t\tSpecies_Code as string,\n\t\tInsert_DateTime as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT DISTINCT \\n       [Product_Code]\\n      ,[Product_Type]\\n      ,[Product_Global_Grade]\\n      ,[Product_Desc]\\n      ,[GL_Code]\\n      ,[Species_Code]\\n      ,[Insert_DateTime]\\nFROM [datamart].[Dim_Product]\\nWHERE Product_Id != -1',\n\tformat: 'query') ~> DatamartDimProductLkp\nsource(output(\n\t\tSpecies_Code as string,\n\t\tSpecies as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT DISTINCT \\n       [Species_Code]\\n      ,[Species]\\nFROM [datamart].[Dim_Species]\\nWHERE Species_ID != -1',\n\tformat: 'query') ~> DatamartSpeciesLkp\nsource(output(\n\t\tGL_Code as string,\n\t\tGL_Desc as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT DISTINCT \\n       [GL_Code]\\n      ,[GL_Desc]\\n  FROM [relational].[Chart_of_Account] \\n  WHERE GL_Code != \\'\\' \\n  AND [record_deleted_flag] = 0\\n  AND [end_datetime] = \\'9999-12-31 00:00:00.000\\'',\n\tformat: 'query') ~> RelationalChartOfAccountLkp\nDatamartDimProductLkp select(mapColumn(\n\t\tProduct_Code_Lkp = Product_Code,\n\t\tProduct_Type_Lkp = Product_Type,\n\t\tProduct_Global_Grade_Lkp = Product_Global_Grade,\n\t\tProduct_Desc_Lkp = Product_Desc,\n\t\tGL_Code_Lkp = GL_Code,\n\t\tSpecies_Code_Lkp = Species_Code,\n\t\tInsert_DateTime_Lkp = Insert_DateTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimProductLkp\nReadSource derive(Source_File = concat($WorkbookName,'-', $WorksheetName),\n\t\tBatch_ID = replace(replace(replace($GeneratedBatchDate, \"-\", \"\"),\":\",\"\"),\" \",\"\"),\n\t\tProcess_Name = $MasterPipelineName) ~> DataTransformation\nRemoveDuplicate, SelectDimProductLkp lookup({Product Code} == Product_Code_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> CheckDimensionRecordExist\nGetNewOrModified derive(InsertUpdateFlag = iif(isNull(Product_Code_Lkp), \"I\", \"U\"),\n\t\tInsert_DateTime = iif(isNull(Product_Code_Lkp), fromUTC(currentUTC(), 'Australia/Sydney'), Insert_DateTime_Lkp),\n\t\tUpdate_DateTime = iif(isNull(Product_Code_Lkp), toTimestamp(\"\"), fromUTC(currentUTC(), 'Australia/Sydney'))) ~> AddAdditionalAudit\nAddAdditionalAudit alterRow(insertIf(equals(InsertUpdateFlag,\"I\")),\n\tupdateIf(equals(InsertUpdateFlag,\"U\"))) ~> AlterRowInsertUpdate\nLookupChartOfAccount split(not(isNull({Product Code})) && \r\n(isNull({Species Code}) || not(isNull(Species_Code_Lkp))) &&\r\n(isNull({GL Code}) || not(isNull(GL_Code_Lkp))),\n\tdisjoint: false) ~> CheckInputRecord@(Valid, Invalid)\nRemoveBlankRow derive(Error_Desc = toString(\"Product Code cannot be empty or Invalid GL Code or Invalid Species Code\"),\n\t\tInsert_Datetime = fromUTC(currentUTC(), 'Australia/Sydney')) ~> AddErrorDetail\nCheckInputRecord@Invalid filter(not(isNull({Product Code})) || not(isNull({Product Type})) || not(isNull({Product Global Grade})) || \r\nnot(isNull({Product Desc})) || not(isNull({GL Code})) || not(isNull({Species Code}))) ~> RemoveBlankRow\nCheckDimensionRecordExist filter(isNull(Product_Code_Lkp) || \r\nnotEquals({Product Type}, Product_Type_Lkp) || \r\nnotEquals({Product Global Grade}, Product_Global_Grade_Lkp) || \r\nnotEquals({Product Desc}, Product_Desc_Lkp) || \r\nnotEquals({GL Code}, GL_Code_Lkp) || \r\nnotEquals({Species Code}, Species_Code_Lkp)) ~> GetNewOrModified\nReplaceNullToUndefined aggregate(groupBy({Product Code},\n\t\t{Product Type},\n\t\t{Product Global Grade},\n\t\t{Product Desc},\n\t\t{GL Code},\n\t\t{Species Code},\n\t\tSource_File,\n\t\tBatch_ID,\n\t\tProcess_Name),\n\tDuplicateCount = count()) ~> RemoveDuplicate\nCheckInputRecord@Valid derive({Product Type} = iifNull({Product Type}, \"Undefined\"),\n\t\t{Product Desc} = iifNull({Product Desc}, \"Undefined\"),\n\t\t{Product Global Grade} = iifNull({Product Global Grade}, \"Undefined\"),\n\t\t{GL Code} = iifNull({GL Code}, \"Undefined\"),\n\t\t{Species Code} = iifNull({Species Code}, \"Undefined\")) ~> ReplaceNullToUndefined\nDatamartSpeciesLkp select(mapColumn(\n\t\tSpecies_Code_Lkp = Species_Code,\n\t\tSpecies_Lkp = Species\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimSpeciesLkp\nRelationalChartOfAccountLkp select(mapColumn(\n\t\tGL_Code_Lkp = GL_Code,\n\t\tGL_Desc_Lkp = GL_Desc\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelationalCoaLkp\nDataTransformation, SelectDimSpeciesLkp lookup({Species Code} == Species_Code_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupDimSpecies\nLookupDimSpecies, SelectRelationalCoaLkp lookup({GL Code} == GL_Code_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupChartOfAccount\nAlterRowInsertUpdate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['Species_Code'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tProduct_Code = {Product Code},\n\t\tProduct_Type = {Product Type},\n\t\tProduct_Global_Grade = {Product Global Grade},\n\t\tProduct_Desc = {Product Desc},\n\t\tGL_Code = {GL Code},\n\t\tSpecies_Code = {Species Code},\n\t\tSource_File,\n\t\tBatch_ID,\n\t\tProcess_Name,\n\t\tInsert_DateTime,\n\t\tUpdate_DateTime\n\t),\n\tpartitionBy('hash', 1)) ~> TargetDim\nAddErrorDetail sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tProduct_Code = {Product Code},\n\t\tProduct_Type = {Product Type},\n\t\tProduct_Global_Grade = {Product Global Grade},\n\t\tProduct_Desc = {Product Desc},\n\t\tGL_Code = {GL Code},\n\t\tSpecies_Code = {Species Code},\n\t\tSource_File,\n\t\tProcess_Name,\n\t\tError_Desc,\n\t\tInsert_Datetime\n\t)) ~> ErrorTable"
		}
	}
}