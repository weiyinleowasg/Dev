{
	"name": "LoadStagingDBtoRelationDB_opsharvestrecon_df1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SQLstagingopsharvestrecon_ds1",
						"type": "DatasetReference"
					},
					"name": "StagingDB"
				},
				{
					"dataset": {
						"referenceName": "SQLrelationopsharvestrecon_ds1",
						"type": "DatasetReference"
					},
					"name": "RelationalHarvestReconciliation"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SQLrelationopsharvestrecon_ds1",
						"type": "DatasetReference"
					},
					"name": "UpserttRow"
				}
			],
			"transformations": [
				{
					"name": "SelectStagingData"
				},
				{
					"name": "AddAuditColumns"
				},
				{
					"name": "GenerateRelationalChecksum"
				},
				{
					"name": "SelectRelationalData"
				},
				{
					"name": "GenerateStagingChecksum"
				},
				{
					"name": "CompareKeys"
				},
				{
					"name": "UnionNewAndExisting"
				},
				{
					"name": "SelectNewRecordData"
				},
				{
					"name": "AlterRowUpsert"
				},
				{
					"name": "ConvertDatesAndNumbersAndID"
				},
				{
					"name": "NewAndExistingRecord"
				},
				{
					"name": "ChangedAddAuditData"
				},
				{
					"name": "SelectChangeRecord"
				}
			],
			"script": "parameters{\n\tProcessName as string,\n\tFileName as string,\n\tEtl_Utc_Tag as string\n}\nsource(output(\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tHarvest_ID as string,\n\t\tReporting_Period as string,\n\t\tHarvest_Unit as string,\n\t\tOperation_Type_Code as string,\n\t\tProduct_Code as string,\n\t\tSpecies_Code as string,\n\t\tTotal_Net_Stocked_Area_of_Harvest_Unit as string,\n\t\tPredicted_Harvested_GMT as string,\n\t\tPredicted_Revenue as string,\n\t\tPredicted_Stumpage as string,\n\t\tActual_Harvest_Commencement as string,\n\t\tActual_Date_of_Reconcilation as string,\n\t\tActual_Harvested_Net_Stocked_Area as string,\n\t\tActual_Harvested_GMT as string,\n\t\tActual_Revenue as string,\n\t\tPredicted_SE_Ex_Managers_Fees_Levys as string,\n\t\tPredicted_SE_Cartage as string,\n\t\tPredicted_SE_Harvesting as string,\n\t\tPredicted_SE_Roading_Capex_Maintanence as string,\n\t\tPredicted_SE_Other as string,\n\t\tActual_SE_Managers_Fees_Levys as string,\n\t\tActual_SE_Cartage as string,\n\t\tActual_SE_Harvesting as string,\n\t\tActual_SE_Roading_Capex_Maintanence as string,\n\t\tActual_SE_Other as string,\n\t\tValidation_Error as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StagingDB\nsource(output(\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tHarvest_ID as integer,\n\t\tReporting_Period as date,\n\t\tHarvest_Unit as string,\n\t\tOperation_Type_Code as string,\n\t\tProduct_Code as string,\n\t\tSpecies_Code as string,\n\t\tTotal_Net_Stocked_Area_of_Harvest_Unit as decimal(19,4),\n\t\tPredicted_Harvested_GMT as decimal(19,4),\n\t\tPredicted_Revenue as decimal(19,4),\n\t\tPredicted_Stumpage as decimal(19,4),\n\t\tActual_Harvest_Commencement as date,\n\t\tActual_Date_of_Reconcilation as date,\n\t\tActual_Harvested_Net_Stocked_Area as decimal(19,4),\n\t\tActual_Harvested_GMT as decimal(19,4),\n\t\tActual_Revenue as decimal(19,4),\n\t\tPredicted_SE_Ex_Managers_Fees_Levys as decimal(19,4),\n\t\tPredicted_SE_Cartage as decimal(19,4),\n\t\tPredicted_SE_Harvesting as decimal(19,4),\n\t\tPredicted_SE_Roading_Capex_Maintanence as decimal(19,4),\n\t\tPredicted_SE_Other as decimal(19,4),\n\t\tActual_SE_Managers_Fees_Levys as decimal(19,4),\n\t\tActual_SE_Cartage as decimal(19,4),\n\t\tActual_SE_Harvesting as decimal(19,4),\n\t\tActual_SE_Roading_Capex_Maintanence as decimal(19,4),\n\t\tActual_SE_Other as decimal(19,4),\n\t\tInsert_Datetime as timestamp,\n\t\tUpdate_Datetime as timestamp,\n\t\tProcess_Name as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> RelationalHarvestReconciliation\nGenerateStagingChecksum select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tHarvest_ID,\n\t\tReporting_Period,\n\t\tHarvest_Unit,\n\t\tOperation_Type_Code,\n\t\tProduct_Code,\n\t\tSpecies_Code,\n\t\tTotal_Net_Stocked_Area_of_Harvest_Unit,\n\t\tPredicted_Harvested_GMT,\n\t\tPredicted_Revenue,\n\t\tPredicted_Stumpage,\n\t\tActual_Harvest_Commencement,\n\t\tActual_Date_of_Reconcilation,\n\t\tActual_Harvested_Net_Stocked_Area,\n\t\tActual_Harvested_GMT,\n\t\tActual_Revenue,\n\t\tPredicted_SE_Ex_Managers_Fees_Levys,\n\t\tPredicted_SE_Cartage,\n\t\tPredicted_SE_Harvesting,\n\t\tPredicted_SE_Roading_Capex_Maintanence,\n\t\tPredicted_SE_Other,\n\t\tActual_SE_Managers_Fees_Levys,\n\t\tActual_SE_Cartage,\n\t\tActual_SE_Harvesting,\n\t\tActual_SE_Roading_Capex_Maintanence,\n\t\tActual_SE_Other,\n\t\tStagingChecksum\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectStagingData\nSelectNewRecordData derive(insert_datetime = fromUTC(currentUTC(), 'Australia/Sydney'),\n\t\tprocess_name = concatWS('_',$ProcessName,$FileName)) ~> AddAuditColumns\nRelationalHarvestReconciliation derive(RelationalChecksum = sha2(256, Reporting_Period,Harvest_Unit,Operation_Type_Code,Product_Code,Species_Code,Total_Net_Stocked_Area_of_Harvest_Unit,Predicted_Harvested_GMT,Predicted_Revenue,Predicted_Stumpage,Actual_Harvest_Commencement,Actual_Date_of_Reconcilation,Actual_Harvested_Net_Stocked_Area,Actual_Harvested_GMT,Actual_Revenue,Predicted_SE_Ex_Managers_Fees_Levys,Predicted_SE_Cartage,Predicted_SE_Harvesting,Predicted_SE_Roading_Capex_Maintanence,Predicted_SE_Other,Actual_SE_Managers_Fees_Levys,Actual_SE_Cartage,Actual_SE_Harvesting,Actual_SE_Roading_Capex_Maintanence,Actual_SE_Other)) ~> GenerateRelationalChecksum\nGenerateRelationalChecksum select(mapColumn(\n\t\tRelation_Asset_ID = Asset_ID,\n\t\tRelation_Fund_ID = Fund_ID,\n\t\tRelation_Harvest_ID = Harvest_ID,\n\t\tRelation_Reporting_Period = Reporting_Period,\n\t\tRelation_Harvest_Unit = Harvest_Unit,\n\t\tRelation_Operation_Type_Code = Operation_Type_Code,\n\t\tRelation_Product_Code = Product_Code,\n\t\tRelation_Species_Code = Species_Code,\n\t\tRelation_Total_Net_Stocked_Area_of_Harvest_Unit = Total_Net_Stocked_Area_of_Harvest_Unit,\n\t\tRelation_Predicted_Harvested_GMT = Predicted_Harvested_GMT,\n\t\tRelation_Predicted_Revenue = Predicted_Revenue,\n\t\tRelation_Predicted_Stumpage = Predicted_Stumpage,\n\t\tRelation_Actual_Harvest_Commencement = Actual_Harvest_Commencement,\n\t\tRelation_Actual_Date_of_Reconcilation = Actual_Date_of_Reconcilation,\n\t\tRelation_Actual_Harvested_Net_Stocked_Area = Actual_Harvested_Net_Stocked_Area,\n\t\tRelation_Actual_Harvested_GMT = Actual_Harvested_GMT,\n\t\tRelation_Actual_Revenue = Actual_Revenue,\n\t\tRelation_Predicted_SE_Ex_Managers_Fees_Levys = Predicted_SE_Ex_Managers_Fees_Levys,\n\t\tRelation_Predicted_SE_Cartage = Predicted_SE_Cartage,\n\t\tRelation_Predicted_SE_Harvesting = Predicted_SE_Harvesting,\n\t\tRelation_Predicted_SE_Roading_Capex_Maintanence = Predicted_SE_Roading_Capex_Maintanence,\n\t\tRelation_Predicted_SE_Other = Predicted_SE_Other,\n\t\tRelation_Actual_SE_Managers_Fees_Levys = Actual_SE_Managers_Fees_Levys,\n\t\tRelation_Actual_SE_Cartage = Actual_SE_Cartage,\n\t\tRelation_Actual_SE_Harvesting = Actual_SE_Harvesting,\n\t\tRelation_Actual_SE_Roading_Capex_Maintanence = Actual_SE_Roading_Capex_Maintanence,\n\t\tRelation_Actual_SE_Other = Actual_SE_Other,\n\t\tRelation_Insert_Datetime = Insert_Datetime,\n\t\tRelation_Update_Datetime = Update_Datetime,\n\t\tRelation_Process_Name = Process_Name,\n\t\tRelation_RelationalChecksum = RelationalChecksum\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelationalData\nConvertDatesAndNumbersAndID derive(StagingChecksum = sha2(256, Reporting_Period,Harvest_Unit,Operation_Type_Code,Product_Code,Species_Code,Total_Net_Stocked_Area_of_Harvest_Unit,Predicted_Harvested_GMT,Predicted_Revenue,Predicted_Stumpage,Actual_Harvest_Commencement,Actual_Date_of_Reconcilation,Actual_Harvested_Net_Stocked_Area,Actual_Harvested_GMT,Actual_Revenue,Predicted_SE_Ex_Managers_Fees_Levys,Predicted_SE_Cartage,Predicted_SE_Harvesting,Predicted_SE_Roading_Capex_Maintanence,Predicted_SE_Other,Actual_SE_Managers_Fees_Levys,Actual_SE_Cartage,Actual_SE_Harvesting,Actual_SE_Roading_Capex_Maintanence,Actual_SE_Other)) ~> GenerateStagingChecksum\nSelectStagingData, SelectRelationalData lookup(Asset_ID == Relation_Asset_ID\n\t&& Fund_ID == Relation_Fund_ID\n\t&& Harvest_ID == Relation_Harvest_ID,\n\tmultiple: true,\n\tbroadcast: 'auto')~> CompareKeys\nAddAuditColumns, SelectChangeRecord union(byName: true)~> UnionNewAndExisting\nNewAndExistingRecord@NewRecord select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tHarvest_ID,\n\t\tReporting_Period,\n\t\tHarvest_Unit,\n\t\tOperation_Type_Code,\n\t\tProduct_Code,\n\t\tSpecies_Code,\n\t\tTotal_Net_Stocked_Area_of_Harvest_Unit,\n\t\tPredicted_Harvested_GMT,\n\t\tPredicted_Revenue,\n\t\tPredicted_Stumpage,\n\t\tActual_Harvest_Commencement,\n\t\tActual_Date_of_Reconcilation,\n\t\tActual_Harvested_Net_Stocked_Area,\n\t\tActual_Harvested_GMT,\n\t\tActual_Revenue,\n\t\tPredicted_SE_Ex_Managers_Fees_Levys,\n\t\tPredicted_SE_Cartage,\n\t\tPredicted_SE_Harvesting,\n\t\tPredicted_SE_Roading_Capex_Maintanence,\n\t\tPredicted_SE_Other,\n\t\tActual_SE_Managers_Fees_Levys,\n\t\tActual_SE_Cartage,\n\t\tActual_SE_Harvesting,\n\t\tActual_SE_Roading_Capex_Maintanence,\n\t\tActual_SE_Other\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectNewRecordData\nUnionNewAndExisting alterRow(upsertIf(true())) ~> AlterRowUpsert\nStagingDB derive(Reporting_Period = toDate(Reporting_Period, \"dd/MM/yyyy\"),\n\t\tHarvest_ID = toInteger(Harvest_ID),\n\t\tTotal_Net_Stocked_Area_of_Harvest_Unit = toDecimal(Total_Net_Stocked_Area_of_Harvest_Unit, 19, 4, \"###,###.##\"),\n\t\tPredicted_Harvested_GMT = toDecimal(Predicted_Harvested_GMT, 19, 4, \"###,###.##\"),\n\t\tPredicted_Revenue = toDecimal(Predicted_Revenue, 19, 4, \"###,###.##\"),\n\t\tPredicted_Stumpage = toDecimal(Predicted_Stumpage, 19, 4, \"###,###.##\"),\n\t\tActual_Harvest_Commencement = toDate(Actual_Harvest_Commencement, \"dd/MM/yyyy\"),\n\t\tActual_Date_of_Reconcilation = toDate(Actual_Date_of_Reconcilation, \"dd/MM/yyyy\"),\n\t\tActual_Harvested_Net_Stocked_Area = toDecimal(Actual_Harvested_Net_Stocked_Area, 19, 4, \"###,###.##\"),\n\t\tActual_Harvested_GMT = toDecimal(Actual_Harvested_GMT, 19, 4, \"###,###.##\"),\n\t\tActual_Revenue = toDecimal(Actual_Revenue, 19, 4, \"###,###.##\"),\n\t\tPredicted_SE_Ex_Managers_Fees_Levys = toDecimal(Predicted_SE_Ex_Managers_Fees_Levys, 19, 4, \"###,###.##\"),\n\t\tPredicted_SE_Cartage = toDecimal(Actual_SE_Cartage, 19, 4, \"###,###.##\"),\n\t\tPredicted_SE_Harvesting = toDecimal(Predicted_SE_Harvesting, 19, 4, \"###,###.##\"),\n\t\tPredicted_SE_Roading_Capex_Maintanence = toDecimal(Predicted_SE_Roading_Capex_Maintanence, 19, 4, \"###,###.##\"),\n\t\tPredicted_SE_Other = toDecimal(Predicted_SE_Other, 19, 4, \"###,###.##\"),\n\t\tActual_SE_Managers_Fees_Levys = toDecimal(Actual_SE_Managers_Fees_Levys, 19, 4, \"###,###.##\"),\n\t\tActual_SE_Cartage = toDecimal(Actual_SE_Cartage, 19, 4, \"###,###.##\"),\n\t\tActual_SE_Harvesting = toDecimal(Actual_SE_Harvesting, 19, 4, \"###,###.##\"),\n\t\tActual_SE_Roading_Capex_Maintanence = toDecimal(Actual_SE_Roading_Capex_Maintanence, 19, 4, \"###,###.##\"),\n\t\tActual_SE_Other = toDecimal(Actual_SE_Other, 19, 4, \"###,###.##\")) ~> ConvertDatesAndNumbersAndID\nCompareKeys split(isNull(Relation_RelationalChecksum),\n\tStagingChecksum != Relation_RelationalChecksum || \r\nTotal_Net_Stocked_Area_of_Harvest_Unit != Relation_Total_Net_Stocked_Area_of_Harvest_Unit || \r\nPredicted_Harvested_GMT != Relation_Predicted_Harvested_GMT || \r\nPredicted_Revenue != Relation_Predicted_Revenue || \r\nPredicted_Stumpage != Relation_Predicted_Stumpage || \r\nActual_Harvested_Net_Stocked_Area != Relation_Actual_Harvested_Net_Stocked_Area || \r\nActual_Harvested_GMT != Relation_Actual_Harvested_GMT || \r\nActual_Revenue != Relation_Actual_Revenue || \r\nPredicted_SE_Ex_Managers_Fees_Levys != Relation_Predicted_SE_Ex_Managers_Fees_Levys || \r\nPredicted_SE_Cartage != Relation_Predicted_SE_Cartage || \r\nPredicted_SE_Harvesting != Relation_Predicted_SE_Harvesting || \r\nPredicted_SE_Roading_Capex_Maintanence != Relation_Predicted_SE_Roading_Capex_Maintanence || \r\nPredicted_SE_Other != Relation_Predicted_SE_Other || \r\nActual_SE_Managers_Fees_Levys != Relation_Actual_SE_Managers_Fees_Levys || \r\nActual_SE_Cartage != Relation_Actual_SE_Cartage || \r\nActual_SE_Harvesting != Relation_Actual_SE_Harvesting || \r\nActual_SE_Roading_Capex_Maintanence != Relation_Actual_SE_Roading_Capex_Maintanence || \r\nActual_SE_Other != Relation_Actual_SE_Other,\n\tdisjoint: false) ~> NewAndExistingRecord@(NewRecord, ChangedRecord, ExistingNoChange)\nNewAndExistingRecord@ChangedRecord derive(update_datetime = fromUTC(currentUTC(), 'Australia/Sydney'),\n\t\tprocess_name = concatWS('_',$ProcessName,$FileName)) ~> ChangedAddAuditData\nChangedAddAuditData select(mapColumn(\n\t\tAsset_ID = Relation_Asset_ID,\n\t\tFund_ID = Relation_Fund_ID,\n\t\tHarvest_ID = Relation_Harvest_ID,\n\t\tReporting_Period,\n\t\tHarvest_Unit,\n\t\tOperation_Type_Code,\n\t\tProduct_Code,\n\t\tSpecies_Code,\n\t\tTotal_Net_Stocked_Area_of_Harvest_Unit,\n\t\tPredicted_Harvested_GMT,\n\t\tPredicted_Revenue,\n\t\tPredicted_Stumpage,\n\t\tActual_Harvest_Commencement,\n\t\tActual_Date_of_Reconcilation,\n\t\tActual_Harvested_Net_Stocked_Area,\n\t\tActual_Harvested_GMT,\n\t\tActual_Revenue,\n\t\tPredicted_SE_Ex_Managers_Fees_Levys,\n\t\tPredicted_SE_Cartage,\n\t\tPredicted_SE_Harvesting,\n\t\tPredicted_SE_Roading_Capex_Maintanence,\n\t\tPredicted_SE_Other,\n\t\tActual_SE_Managers_Fees_Levys,\n\t\tActual_SE_Cartage,\n\t\tActual_SE_Harvesting,\n\t\tActual_SE_Roading_Capex_Maintanence,\n\t\tActual_SE_Other,\n\t\tinsert_datetime = Relation_Insert_Datetime,\n\t\tupdate_datetime,\n\t\tprocess_name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectChangeRecord\nAlterRowUpsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tHarvest_ID as integer,\n\t\tReporting_Period as date,\n\t\tHarvest_Unit as string,\n\t\tOperation_Type_Code as string,\n\t\tProduct_Code as string,\n\t\tSpecies_Code as string,\n\t\tTotal_Net_Stocked_Area_of_Harvest_Unit as decimal(19,4),\n\t\tPredicted_Harvested_GMT as decimal(19,4),\n\t\tPredicted_Revenue as decimal(19,4),\n\t\tPredicted_Stumpage as decimal(19,4),\n\t\tActual_Harvest_Commencement as date,\n\t\tActual_Date_of_Reconcilation as date,\n\t\tActual_Harvested_Net_Stocked_Area as decimal(19,4),\n\t\tActual_Harvested_GMT as decimal(19,4),\n\t\tActual_Revenue as decimal(19,4),\n\t\tPredicted_SE_Ex_Managers_Fees_Levys as decimal(19,4),\n\t\tPredicted_SE_Cartage as decimal(19,4),\n\t\tPredicted_SE_Harvesting as decimal(19,4),\n\t\tPredicted_SE_Roading_Capex_Maintanence as decimal(19,4),\n\t\tPredicted_SE_Other as decimal(19,4),\n\t\tActual_SE_Managers_Fees_Levys as decimal(19,4),\n\t\tActual_SE_Cartage as decimal(19,4),\n\t\tActual_SE_Harvesting as decimal(19,4),\n\t\tActual_SE_Roading_Capex_Maintanence as decimal(19,4),\n\t\tActual_SE_Other as decimal(19,4),\n\t\tInsert_Datetime as timestamp,\n\t\tUpdate_Datetime as timestamp,\n\t\tProcess_Name as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['Asset_ID','Fund_ID','Harvest_ID'],\n\tformat: 'table',\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tHarvest_ID,\n\t\tReporting_Period,\n\t\tHarvest_Unit,\n\t\tOperation_Type_Code,\n\t\tProduct_Code,\n\t\tSpecies_Code,\n\t\tTotal_Net_Stocked_Area_of_Harvest_Unit,\n\t\tPredicted_Harvested_GMT,\n\t\tPredicted_Revenue,\n\t\tPredicted_Stumpage,\n\t\tActual_Harvest_Commencement,\n\t\tActual_Date_of_Reconcilation,\n\t\tActual_Harvested_Net_Stocked_Area,\n\t\tActual_Harvested_GMT,\n\t\tActual_Revenue,\n\t\tPredicted_SE_Ex_Managers_Fees_Levys,\n\t\tPredicted_SE_Cartage,\n\t\tPredicted_SE_Harvesting,\n\t\tPredicted_SE_Roading_Capex_Maintanence,\n\t\tPredicted_SE_Other,\n\t\tActual_SE_Managers_Fees_Levys,\n\t\tActual_SE_Cartage,\n\t\tActual_SE_Harvesting,\n\t\tActual_SE_Roading_Capex_Maintanence,\n\t\tActual_SE_Other,\n\t\tInsert_Datetime = insert_datetime,\n\t\tUpdate_Datetime = update_datetime,\n\t\tProcess_Name = process_name\n\t)) ~> UpserttRow"
		}
	}
}