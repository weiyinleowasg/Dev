{
	"name": "LoadMktDimDeliveryPoint_InsertUpdate_df",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CSVgenericWithParameter_ds",
						"type": "DatasetReference"
					},
					"name": "ReadSource"
				},
				{
					"dataset": {
						"referenceName": "SQLtableGeneric_ds",
						"type": "DatasetReference"
					},
					"name": "RelationalDimDeliveryPointLkp"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SQLtableGenericWithParam_ds",
						"type": "DatasetReference"
					},
					"name": "TargetDim"
				},
				{
					"dataset": {
						"referenceName": "SQLtableGenericWithParam_ds",
						"type": "DatasetReference"
					},
					"name": "ErrorTable"
				}
			],
			"transformations": [
				{
					"name": "SelectDimDeliveryPointLkp"
				},
				{
					"name": "DataTransformation"
				},
				{
					"name": "CheckDimensionRecordExist"
				},
				{
					"name": "AddAdditionalAudit"
				},
				{
					"name": "AlterRowInsertUpdate"
				},
				{
					"name": "CheckInputRecord"
				},
				{
					"name": "AddErrorDetail"
				},
				{
					"name": "RemoveBlankRow"
				},
				{
					"name": "GetNewOrModified"
				},
				{
					"name": "RemoveDuplicate"
				},
				{
					"name": "ReplaceNullToUndefined"
				}
			],
			"script": "parameters{\n\tGeneratedBatchDate as string,\n\tWorkbookName as string,\n\tWorksheetName as string,\n\tMasterPipelineName as string\n}\nsource(output(\n\t\t{Deliver Point Code} as string,\n\t\t{Delivery Point} as string,\n\t\t{Delivery Point Desc} as string,\n\t\t{Delivery Point Long Desc} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> ReadSource\nsource(output(\n\t\tDeliver_Point_Code as string,\n\t\tDelivery_Point as string,\n\t\tDelivery_Point_Desc as string,\n\t\tDelivery_Point_Long_Desc as string,\n\t\tInsert_DateTime as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT DISTINCT\\n       [Deliver_Point_Code]\\n      ,[Delivery_Point]\\n      ,[Delivery_Point_Desc]\\n      ,[Delivery_Point_Long_Desc]\\n      ,[Insert_DateTime]\\nFROM [datamart].[Dim_Delivery_Point]\\nWHERE Delivery_Point_ID != -1',\n\tformat: 'query') ~> RelationalDimDeliveryPointLkp\nRelationalDimDeliveryPointLkp select(mapColumn(\n\t\tDeliver_Point_Code_Lkp = Deliver_Point_Code,\n\t\tDelivery_Point_Lkp = Delivery_Point,\n\t\tDelivery_Point_Desc_Lkp = Delivery_Point_Desc,\n\t\tDelivery_Point_Long_Desc_Lkp = Delivery_Point_Long_Desc,\n\t\tInsert_DateTime_Lkp = Insert_DateTime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectDimDeliveryPointLkp\nReadSource derive(Source_File = concat($WorkbookName,'-', $WorksheetName),\n\t\tBatch_ID = replace(replace(replace($GeneratedBatchDate, \"-\", \"\"),\":\",\"\"),\" \",\"\"),\n\t\tProcess_Name = $MasterPipelineName) ~> DataTransformation\nRemoveDuplicate, SelectDimDeliveryPointLkp lookup({Deliver Point Code} == Deliver_Point_Code_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> CheckDimensionRecordExist\nGetNewOrModified derive(InsertUpdateFlag = iif(isNull(Deliver_Point_Code_Lkp), \"I\", \"U\"),\n\t\tInsert_DateTime = iif(isNull(Deliver_Point_Code_Lkp), fromUTC(currentUTC(), 'Australia/Sydney'), Insert_DateTime_Lkp),\n\t\tUpdate_DateTime = iif(isNull(Deliver_Point_Code_Lkp), toTimestamp(\"\"), fromUTC(currentUTC(), 'Australia/Sydney'))) ~> AddAdditionalAudit\nAddAdditionalAudit alterRow(insertIf(equals(InsertUpdateFlag,\"I\")),\n\tupdateIf(equals(InsertUpdateFlag,\"U\"))) ~> AlterRowInsertUpdate\nDataTransformation split(not(isNull({Deliver Point Code})),\n\tdisjoint: false) ~> CheckInputRecord@(Valid, Invalid)\nRemoveBlankRow derive(Error_Desc = toString(\"Delivery Point Code cannot be empty\"),\n\t\tInsert_Datetime = fromUTC(currentUTC(), 'Australia/Sydney')) ~> AddErrorDetail\nCheckInputRecord@Invalid filter(not(isNull({Deliver Point Code})) || not(isNull({Delivery Point})) || \r\nnot(isNull({Delivery Point Desc})) || not(isNull({Delivery Point Long Desc}))) ~> RemoveBlankRow\nCheckDimensionRecordExist filter(isNull(Deliver_Point_Code_Lkp) || \r\nnotEquals({Delivery Point}, Delivery_Point_Lkp) || \r\nnotEquals({Delivery Point Desc}, Delivery_Point_Desc_Lkp) || \r\nnotEquals({Delivery Point Long Desc}, Delivery_Point_Long_Desc_Lkp)) ~> GetNewOrModified\nReplaceNullToUndefined aggregate(groupBy({Deliver Point Code},\n\t\t{Delivery Point},\n\t\t{Delivery Point Desc},\n\t\t{Delivery Point Long Desc},\n\t\tSource_File,\n\t\tBatch_ID,\n\t\tProcess_Name),\n\tDuplicateCount = count()) ~> RemoveDuplicate\nCheckInputRecord@Valid derive({Delivery Point} = iifNull({Delivery Point}, \"Undefined\"),\n\t\t{Delivery Point Desc} = iifNull({Delivery Point Desc}, \"Undefined\"),\n\t\t{Delivery Point Long Desc} = iifNull({Delivery Point Long Desc}, \"Undefined\")) ~> ReplaceNullToUndefined\nAlterRowInsertUpdate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['Deliver_Point_Code'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tDeliver_Point_Code = {Deliver Point Code},\n\t\tDelivery_Point = {Delivery Point},\n\t\tDelivery_Point_Desc = {Delivery Point Desc},\n\t\tDelivery_Point_Long_Desc = {Delivery Point Long Desc},\n\t\tSource_File,\n\t\tBatch_ID,\n\t\tProcess_Name,\n\t\tInsert_DateTime,\n\t\tUpdate_DateTime\n\t),\n\tpartitionBy('hash', 1)) ~> TargetDim\nAddErrorDetail sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tDeliver_Point_Code = {Deliver Point Code},\n\t\tDelivery_Point = {Delivery Point},\n\t\tDelivery_Point_Desc = {Delivery Point Desc},\n\t\tDelivery_Point_Long_Desc = {Delivery Point Long Desc},\n\t\tSource_File,\n\t\tProcess_Name,\n\t\tError_Desc,\n\t\tInsert_Datetime\n\t)) ~> ErrorTable"
		}
	}
}