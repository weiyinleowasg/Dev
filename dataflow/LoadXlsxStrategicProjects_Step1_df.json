{
	"name": "LoadXlsxStrategicProjects_Step1_df",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ParquetPersistentOpsWithTabParam_ds",
						"type": "DatasetReference"
					},
					"name": "SourceDataTab"
				},
				{
					"dataset": {
						"referenceName": "SQLtableGeneric_ds",
						"type": "DatasetReference"
					},
					"name": "RelationalStrategicProjectsLkp"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ParquetPersistentOps_ds",
						"type": "DatasetReference"
					},
					"name": "TargetPersistentParquetInsert"
				},
				{
					"dataset": {
						"referenceName": "SQLtableGenericWithParam_ds",
						"type": "DatasetReference"
					},
					"name": "ErrorTable"
				},
				{
					"dataset": {
						"referenceName": "ParquetPersistentOps_ds",
						"type": "DatasetReference"
					},
					"name": "TargetPersistenParquetUpdate"
				}
			],
			"transformations": [
				{
					"name": "ValidateMandatoryColumns",
					"description": "ReportingDateCertificationIDValidateMsg is a test and should be considered as part of the conditional split Insert/Update activity"
				},
				{
					"name": "SegregateValidInvalidRows"
				},
				{
					"name": "SelectedColumnsOutputInsert"
				},
				{
					"name": "ConcatenateInvalidColumnsMessage"
				},
				{
					"name": "SelectedOutputColumnsError"
				},
				{
					"name": "GenerateRowNumber"
				},
				{
					"name": "DateTypeTransform"
				},
				{
					"name": "SplitInsertAndUpdate",
					"description": "1. The condition assume that the records from the current reporting period are deleted first if any (asset id, fund id, current reporting period)\n2. Records where reporting period equal current reporting period (disregard certification id) are inserted/reinserted after delete in 1\n3. Remaining records are not from current reporting period and the certification ids must not be null. These are updated"
				},
				{
					"name": "SelectColumnsOutputUpdate"
				},
				{
					"name": "UpdateDatetimeValue"
				},
				{
					"name": "SelectStrategicProjectsLkp"
				},
				{
					"name": "LookupStrategicProject"
				},
				{
					"name": "ExcludeFirstRow"
				}
			],
			"script": "parameters{\n\tMasterUtcTag as string,\n\tCurrentRunDateTime as string,\n\tWorkbookName as string,\n\tTabName as string,\n\tCurrentQuarterDate as string,\n\tMasterPipeline as string\n}\nsource(output(\n\t\tProject_ID as string,\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tReporting_Period as string,\n\t\tValidation_Flag as string,\n\t\tPrimary_Management_Activity as string,\n\t\tProject_Objectives as string,\n\t\tExpected_Value_Impact as string,\n\t\tDeliverable as string,\n\t\tDeliverable_Project_Weighting as string,\n\t\tDeliverable_Expected_Completion_Date as string,\n\t\tDeliverable_Planned_Completion_Date as string,\n\t\tCurrent_Progress_Percent_Complete as string,\n\t\tNotes as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'parquet',\n\tpartitionBy('hash', 1)) ~> SourceDataTab\nsource(output(\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tProject_ID as integer,\n\t\tReporting_Period as date,\n\t\tPrimary_Management_Activity as string,\n\t\tProject_Objectives as string,\n\t\tExpected_Value_Impact as string,\n\t\tDeliverable as string,\n\t\tProject_Weighting as short,\n\t\tExpected_Completion_Date as date,\n\t\tPlanned_Completion_Date as date,\n\t\tCurrent_Progress_Perc_Complete as short,\n\t\tInsert_Datetime as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT DISTINCT [Asset_ID]\\n      ,[Fund_ID]\\n      ,[Project_ID]\\n      ,[Reporting_Period]\\n      ,[Primary_Management_Activity]\\n      ,[Project_Objectives]\\n      ,[Expected_Value_Impact]\\n      ,[Deliverable]\\n      ,[Project_Weighting]\\n      ,[Expected_Completion_Date]\\n      ,[Planned_Completion_Date]\\n      ,[Current_Progress_Perc_Complete]\\n      ,[Insert_Datetime]\\n  FROM [relational].[OPS_Strategic_Project]',\n\tformat: 'query') ~> RelationalStrategicProjectsLkp\nLookupStrategicProject derive(AssetReportingDateValidateMsg = iif(isNull(Asset_ID) || isNull(Fund_ID) || isNull(Reporting_Period), \"Invalid Asset or Reporting Period/\", \"\"),\n\t\tReportingDateProjectIDValidateMsg = iif(iif(CurrentReportingPeriod != Reporting_Period, true(), false()) && isNull(Project_ID),\"Null Project ID for non-current Reporting Period/\",\"\"),\n\t\tLkpRelationalProjectIDValidateMsg = iif(not(isNull(Project_ID_Lkp)),\r\niif(equals(concat(Asset_ID_Lkp,Fund_ID_Lkp), concat(Asset_ID,Fund_ID)),\"\",\"Project ID not belong to Asset/\"),\"\"),\n\t\tPrimaryManageActivityValidateMsg = iif(isNull(Primary_Management_Activity), \"Primary Management Activity/\",\"\"),\n\t\tExpectedCompletionValidateMsg = iif(not(isNull(Deliverable_Expected_Completion_Date)),iif(not(isNull(Deliverable_Expected_Completion_Date_toDate)),\"\",\"Expected Completion Date/\"),\"Expected Completion Date/\"),\n\t\tPlannedCompletionValidateMsg = iif(not(isNull(Deliverable_Planned_Completion_Date)),iif(not(isNull(Deliverable_Planned_Completion_Date_toDate)),\"\",\"Planned Completion Date/\"),\"Planned Completion Date/\")) ~> ValidateMandatoryColumns\nValidateMandatoryColumns split(length(concatWS('',AssetReportingDateValidateMsg,\r\nLkpRelationalProjectIDValidateMsg,\r\nReportingDateProjectIDValidateMsg,\r\nPrimaryManageActivityValidateMsg, ExpectedCompletionValidateMsg, PlannedCompletionValidateMsg)) == 0,\n\tdisjoint: false) ~> SegregateValidInvalidRows@(ValidRows, InvalidRows)\nSplitInsertAndUpdate@Insert select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tPrimary_Management_Activity,\n\t\tProject_Objectives,\n\t\tExpected_Value_Impact,\n\t\tDeliverable,\n\t\tProject_Weighting,\n\t\tExpected_Completion_Date = Deliverable_Expected_Completion_Date_toDate,\n\t\tPlanned_Completion_Date = Deliverable_Planned_Completion_Date_toDate,\n\t\tCurrent_Progress_Perc_Complete,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tProcess_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectedColumnsOutputInsert\nSegregateValidInvalidRows@InvalidRows derive(ConcatenatedMessage = concat(AssetReportingDateValidateMsg, ReportingDateProjectIDValidateMsg, LkpRelationalProjectIDValidateMsg, \r\nPrimaryManageActivityValidateMsg, ExpectedCompletionValidateMsg, PlannedCompletionValidateMsg)) ~> ConcatenateInvalidColumnsMessage\nConcatenateInvalidColumnsMessage select(mapColumn(\n\t\tProject_ID,\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tPrimary_Management_Activity,\n\t\tProject_Objectives,\n\t\tExpected_Value_Impact,\n\t\tDeliverable,\n\t\tProject_Weighting,\n\t\tExpected_Completion_Date = Deliverable_Expected_Completion_Date,\n\t\tPlanned_Completion_Date = Deliverable_Planned_Completion_Date,\n\t\tCurrent_Progress_Perc_Complete,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tSource_File = Work_Book,\n\t\tSource_Sub_File = Work_Sheet,\n\t\tProcess_Name,\n\t\tError_Desc = ConcatenatedMessage\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectedOutputColumnsError\nDateTypeTransform keyGenerate(output(RowNumber as long),\n\tstartAt: 1L,\n\tpartitionBy('hash', 1)) ~> GenerateRowNumber\nSourceDataTab derive(Reporting_Period = toDate(Reporting_Period),\n\t\tDeliverable_Expected_Completion_Date_toDate = toDate(Deliverable_Expected_Completion_Date),\n\t\tDeliverable_Planned_Completion_Date_toDate = toDate(Deliverable_Planned_Completion_Date),\n\t\tProject_Weighting = toShort(Deliverable_Project_Weighting),\n\t\tCurrent_Progress_Perc_Complete = toShort(toDecimal(Current_Progress_Percent_Complete, 3, 2) * 100),\n\t\tProject_ID = toInteger(Project_ID),\n\t\tInsert_Datetime = fromUTC(currentUTC(), 'Australia/Sydney'),\n\t\tUpdate_Datetime = toTimestamp('9999-12-31 00:00:00'),\n\t\tWork_Book = $WorkbookName,\n\t\tWork_Sheet = $TabName,\n\t\tProcess_Name = concatWS('-',$MasterPipeline,$WorkbookName,$TabName),\n\t\tCurrentReportingPeriod = toDate($CurrentQuarterDate)) ~> DateTypeTransform\nSegregateValidInvalidRows@ValidRows split(equals(Reporting_Period, CurrentReportingPeriod),\n\tdisjoint: false) ~> SplitInsertAndUpdate@(Insert, Update)\nUpdateDatetimeValue select(mapColumn(\n\t\tProject_ID,\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tPrimary_Management_Activity,\n\t\tProject_Objectives,\n\t\tExpected_Value_Impact,\n\t\tDeliverable,\n\t\tProject_Weighting,\n\t\tExpected_Completion_Date = Deliverable_Expected_Completion_Date_toDate,\n\t\tPlanned_Completion_Date = Deliverable_Planned_Completion_Date_toDate,\n\t\tCurrent_Progress_Perc_Complete,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tProcess_Name\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectColumnsOutputUpdate\nSplitInsertAndUpdate@Update derive(Update_Datetime = fromUTC(currentUTC(), 'Australia/Sydney'),\n\t\tInsert_Datetime = Insert_Datetime_Lkp) ~> UpdateDatetimeValue\nRelationalStrategicProjectsLkp select(mapColumn(\n\t\tAsset_ID_Lkp = Asset_ID,\n\t\tFund_ID_Lkp = Fund_ID,\n\t\tProject_ID_Lkp = Project_ID,\n\t\tReporting_Period_Lkp = Reporting_Period,\n\t\tPrimary_Management_Activity_Lkp = Primary_Management_Activity,\n\t\tProject_Objectives_Lkp = Project_Objectives,\n\t\tExpected_Value_Impact_Lkp = Expected_Value_Impact,\n\t\tDeliverable_Lkp = Deliverable,\n\t\tProject_Weighting_Lkp = Project_Weighting,\n\t\tExpected_Completion_Date_Lkp = Expected_Completion_Date,\n\t\tPlanned_Completion_Date_Lkp = Planned_Completion_Date,\n\t\tCurrent_Progress_Perc_Complete_Lkp = Current_Progress_Perc_Complete,\n\t\tInsert_Datetime_Lkp = Insert_Datetime\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectStrategicProjectsLkp\nExcludeFirstRow, SelectStrategicProjectsLkp lookup(Project_ID == Project_ID_Lkp,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> LookupStrategicProject\nGenerateRowNumber filter(RowNumber > 1 && \r\n(not(isNull(Primary_Management_Activity)) || not(isNull(Project_Objectives)) || \r\nnot(isNull(Expected_Value_Impact)) || not(isNull(Deliverable)) || not(isNull(Deliverable_Project_Weighting)) || \r\nnot(isNull(Deliverable_Expected_Completion_Date)) || not(isNull(Deliverable_Planned_Completion_Date)) || not(isNull(Current_Progress_Percent_Complete))\r\n)) ~> ExcludeFirstRow\nSelectedColumnsOutputInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concatWS(\"_\", $WorkbookName, $TabName,$CurrentQuarterDate,'LoadReady'))],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tPrimary_Management_Activity,\n\t\tProject_Objectives,\n\t\tExpected_Value_Impact,\n\t\tDeliverable,\n\t\tProject_Weighting,\n\t\tExpected_Completion_Date,\n\t\tPlanned_Completion_Date,\n\t\tCurrent_Progress_Perc_Complete,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tProcess_Name\n\t),\n\tpartitionBy('hash', 1)) ~> TargetPersistentParquetInsert\nSelectedOutputColumnsError sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tProject_ID,\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tPrimary_Management_Activity,\n\t\tProject_Objectives,\n\t\tExpected_Value_Impact,\n\t\tDeliverable,\n\t\tProject_Weighting,\n\t\tExpected_Completion_Date,\n\t\tPlanned_Completion_Date,\n\t\tCurrent_Progress_Perc_Complete,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tSource_File,\n\t\tSource_Sub_File,\n\t\tProcess_Name,\n\t\tError_Desc\n\t),\n\tpartitionBy('hash', 1)) ~> ErrorTable\nSelectColumnsOutputUpdate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tpartitionFileNames:[(concatWS(\"_\", $WorkbookName, $TabName,$CurrentQuarterDate,'Update'))],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tProject_ID,\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tReporting_Period,\n\t\tPrimary_Management_Activity,\n\t\tProject_Objectives,\n\t\tExpected_Value_Impact,\n\t\tDeliverable,\n\t\tProject_Weighting,\n\t\tExpected_Completion_Date,\n\t\tPlanned_Completion_Date,\n\t\tCurrent_Progress_Perc_Complete,\n\t\tInsert_Datetime,\n\t\tUpdate_Datetime,\n\t\tProcess_Name\n\t),\n\tpartitionBy('hash', 1)) ~> TargetPersistenParquetUpdate"
		}
	}
}