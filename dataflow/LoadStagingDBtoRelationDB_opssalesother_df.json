{
	"name": "LoadStagingDBtoRelationDB_opssalesother_df",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SQLstagingopssalesother",
						"type": "DatasetReference"
					},
					"name": "StagingDB"
				},
				{
					"dataset": {
						"referenceName": "SQLrelationopssalesother_ds",
						"type": "DatasetReference"
					},
					"name": "RelationalSalesOther"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SQLrelationopssalesother_ds",
						"type": "DatasetReference"
					},
					"name": "UpserttRow"
				}
			],
			"transformations": [
				{
					"name": "SelectStagingData"
				},
				{
					"name": "AddAuditColumns"
				},
				{
					"name": "GenerateRelationalChecksum"
				},
				{
					"name": "SelectRelationalData"
				},
				{
					"name": "GenerateStagingChecksum"
				},
				{
					"name": "CompareKeys"
				},
				{
					"name": "UnionNewAndExisting"
				},
				{
					"name": "SelectNewRecordData"
				},
				{
					"name": "AlterRowUpsert"
				},
				{
					"name": "ConvertDatesAndIdAndNumbers"
				},
				{
					"name": "NewAndExistingSalesOther"
				},
				{
					"name": "ChangedAddAuditData"
				},
				{
					"name": "SelectChangeRecord"
				}
			],
			"script": "parameters{\n\tProcessName as string,\n\tFileName as string,\n\tEtl_Utc_Tag as string\n}\nsource(output(\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tOther_Sale_Id as string,\n\t\tReporting_Period as string,\n\t\tSale_Type_Code as string,\n\t\tSales_UOM as string,\n\t\tSales_Point as string,\n\t\tTotal_Units_Sold as string,\n\t\tSales_revenue as string,\n\t\tSales_Cost as string,\n\t\tSales_Net_Revenue as string,\n\t\tSales_Net_Revenue_Per_Unit as string,\n\t\tCurrency_Code as string,\n\t\tBudget_Sales_Quantity as string,\n\t\tBudget_Sales_Revenue as string,\n\t\tBudget_Sales_Cost as string,\n\t\tValidation_Error as string,\n\t\tSales_Type as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StagingDB\nsource(output(\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tOther_Sale_Id as integer,\n\t\tReporting_Period as date,\n\t\tSale_Type_Code as string,\n\t\tSales_UOM as string,\n\t\tSales_Point as string,\n\t\tTotal_Units_Sold as decimal(19,4),\n\t\tSales_revenue as decimal(19,4),\n\t\tSales_Cost as decimal(19,4),\n\t\tSales_Net_Revenue as decimal(19,4),\n\t\tSales_Net_Revenue_Per_Unit as decimal(19,4),\n\t\tCurrency_Code as string,\n\t\tBudget_Sales_Quantity as decimal(19,4),\n\t\tBudget_Sales_Revenue as decimal(19,4),\n\t\tBudget_Sales_Cost as decimal(19,4),\n\t\tInsert_Datetime as timestamp,\n\t\tUpdate_Datetime as timestamp,\n\t\tProcess_Name as string,\n\t\tSales_Type as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> RelationalSalesOther\nGenerateStagingChecksum select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tOther_Sale_Id,\n\t\tReporting_Period,\n\t\tSale_Type_Code,\n\t\tSales_UOM,\n\t\tSales_Point,\n\t\tTotal_Units_Sold,\n\t\tSales_revenue,\n\t\tSales_Cost,\n\t\tSales_Net_Revenue,\n\t\tSales_Net_Revenue_Per_Unit,\n\t\tCurrency_Code,\n\t\tBudget_Sales_Quantity,\n\t\tBudget_Sales_Revenue,\n\t\tBudget_Sales_Cost,\n\t\tStagingChecksum,\n\t\tSales_Type\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> SelectStagingData\nSelectNewRecordData derive(insert_datetime = fromUTC(currentUTC(), 'Australia/Sydney'),\n\t\tprocess_name = concatWS('_',$ProcessName,$FileName)) ~> AddAuditColumns\nRelationalSalesOther derive(RelationalChecksum = sha2(256, Reporting_Period,Sale_Type_Code,Sales_UOM,Sales_Point,Total_Units_Sold,Sales_revenue,Sales_Cost,Sales_Net_Revenue,Sales_Net_Revenue_Per_Unit,Currency_Code,Budget_Sales_Quantity,Budget_Sales_Revenue,Budget_Sales_Cost)) ~> GenerateRelationalChecksum\nGenerateRelationalChecksum select(mapColumn(\n\t\tRelation_Asset_ID = Asset_ID,\n\t\tRelation_Fund_ID = Fund_ID,\n\t\tRelation_Other_Sale_Id = Other_Sale_Id,\n\t\tRelation_Reporting_Period = Reporting_Period,\n\t\tRelation_Sale_Type_Code = Sale_Type_Code,\n\t\tRelation_Sales_UOM = Sales_UOM,\n\t\tRelation_Sales_Point = Sales_Point,\n\t\tRelation_Total_Units_Sold = Total_Units_Sold,\n\t\tRelation_Sales_revenue = Sales_revenue,\n\t\tRelation_Sales_Cost = Sales_Cost,\n\t\tRelation_Sales_Net_Revenue = Sales_Net_Revenue,\n\t\tRelation_Sales_Net_Revenue_Per_Unit = Sales_Net_Revenue_Per_Unit,\n\t\tRelation_Currency_Code = Currency_Code,\n\t\tRelation_Budget_Sales_Quantity = Budget_Sales_Quantity,\n\t\tRelation_Budget_Sales_Revenue = Budget_Sales_Revenue,\n\t\tRelation_Budget_Sales_Cost = Budget_Sales_Cost,\n\t\tRelation_Insert_Datetime = Insert_Datetime,\n\t\tRelation_Update_Datetime = Update_Datetime,\n\t\tRelation_Process_Name = Process_Name,\n\t\tRelation_RelationalChecksum = RelationalChecksum\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectRelationalData\nConvertDatesAndIdAndNumbers derive(StagingChecksum = sha2(256, Reporting_Period,Sale_Type_Code,Sales_UOM,Sales_Point,Total_Units_Sold,Sales_revenue,Sales_Cost,Sales_Net_Revenue,Sales_Net_Revenue_Per_Unit,Currency_Code,Budget_Sales_Quantity,Budget_Sales_Revenue,Budget_Sales_Cost)) ~> GenerateStagingChecksum\nSelectStagingData, SelectRelationalData lookup(Asset_ID == Relation_Asset_ID\n\t&& Fund_ID == Relation_Fund_ID\n\t&& Other_Sale_Id == Relation_Other_Sale_Id,\n\tmultiple: true,\n\tbroadcast: 'auto')~> CompareKeys\nAddAuditColumns, SelectChangeRecord union(byName: true)~> UnionNewAndExisting\nNewAndExistingSalesOther@NewSalesOther select(mapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tOther_Sale_Id,\n\t\tReporting_Period,\n\t\tSale_Type_Code,\n\t\tSales_UOM,\n\t\tSales_Point,\n\t\tTotal_Units_Sold,\n\t\tSales_revenue,\n\t\tSales_Cost,\n\t\tSales_Net_Revenue,\n\t\tSales_Net_Revenue_Per_Unit,\n\t\tCurrency_Code,\n\t\tBudget_Sales_Quantity,\n\t\tBudget_Sales_Revenue,\n\t\tBudget_Sales_Cost,\n\t\tSales_Type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectNewRecordData\nUnionNewAndExisting alterRow(upsertIf(true())) ~> AlterRowUpsert\nStagingDB derive(Reporting_Period = toDate(Reporting_Period, \"dd/MM/yyyy\"),\n\t\tOther_Sale_Id = toInteger(Other_Sale_Id),\n\t\tTotal_Units_Sold = toDecimal(Total_Units_Sold, 19, 4, \"###,###.####\"),\n\t\tSales_revenue = toDecimal(Sales_revenue, 19, 4, \"###,###.####\"),\n\t\tSales_Cost = toDecimal(Sales_Cost, 19, 4, \"###,###.####\"),\n\t\tSales_Net_Revenue = toDecimal(Sales_Net_Revenue, 19, 4, \"###,###.####\"),\n\t\tSales_Net_Revenue_Per_Unit = toDecimal(Sales_Net_Revenue_Per_Unit, 19, 4, \"###,###.####\"),\n\t\tBudget_Sales_Quantity = toDecimal(Budget_Sales_Quantity, 19, 4, \"###,###.####\"),\n\t\tBudget_Sales_Revenue = toDecimal(Budget_Sales_Revenue, 19, 4, \"###,###.####\"),\n\t\tBudget_Sales_Cost = toDecimal(Budget_Sales_Cost, 19, 4, \"###,###.####\")) ~> ConvertDatesAndIdAndNumbers\nCompareKeys split(isNull(Relation_RelationalChecksum),\n\tStagingChecksum != Relation_RelationalChecksum || \r\nTotal_Units_Sold != Relation_Total_Units_Sold || \r\nSales_revenue != Relation_Sales_revenue || \r\nSales_Cost != Relation_Sales_Cost || \r\nSales_Net_Revenue != Relation_Sales_Net_Revenue || \r\nSales_Net_Revenue_Per_Unit != Relation_Sales_Net_Revenue_Per_Unit || \r\nBudget_Sales_Quantity != Relation_Budget_Sales_Quantity || \r\nBudget_Sales_Revenue != Relation_Budget_Sales_Revenue || \r\nBudget_Sales_Cost != Relation_Budget_Sales_Cost,\n\tdisjoint: false) ~> NewAndExistingSalesOther@(NewSalesOther, ChangedSalesOther, ExistingNoChange)\nNewAndExistingSalesOther@ChangedSalesOther derive(update_datetime = fromUTC(currentUTC(), 'Australia/Sydney'),\n\t\tprocess_name = concatWS('_',$ProcessName,$FileName)) ~> ChangedAddAuditData\nChangedAddAuditData select(mapColumn(\n\t\tAsset_ID = Relation_Asset_ID,\n\t\tFund_ID = Relation_Fund_ID,\n\t\tOther_Sale_Id = Relation_Other_Sale_Id,\n\t\tReporting_Period,\n\t\tSale_Type_Code,\n\t\tSales_UOM,\n\t\tSales_Point,\n\t\tTotal_Units_Sold,\n\t\tSales_revenue,\n\t\tSales_Cost,\n\t\tSales_Net_Revenue,\n\t\tSales_Net_Revenue_Per_Unit,\n\t\tCurrency_Code,\n\t\tBudget_Sales_Quantity,\n\t\tBudget_Sales_Revenue,\n\t\tBudget_Sales_Cost,\n\t\tinsert_datetime = Relation_Insert_Datetime,\n\t\tupdate_datetime,\n\t\tprocess_name,\n\t\tSales_Type\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectChangeRecord\nAlterRowUpsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tAsset_ID as string,\n\t\tFund_ID as string,\n\t\tOther_Sale_Id as integer,\n\t\tReporting_Period as date,\n\t\tSale_Type_Code as string,\n\t\tSales_UOM as string,\n\t\tSales_Point as string,\n\t\tTotal_Units_Sold as decimal(19,4),\n\t\tSales_revenue as decimal(19,4),\n\t\tSales_Cost as decimal(19,4),\n\t\tSales_Net_Revenue as decimal(19,4),\n\t\tSales_Net_Revenue_Per_Unit as decimal(19,4),\n\t\tCurrency_Code as string,\n\t\tBudget_Sales_Quantity as decimal(19,4),\n\t\tBudget_Sales_Revenue as decimal(19,4),\n\t\tBudget_Sales_Cost as decimal(19,4),\n\t\tInsert_Datetime as timestamp,\n\t\tUpdate_Datetime as timestamp,\n\t\tProcess_Name as string,\n\t\tSales_Type as string\n\t),\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['Asset_ID','Fund_ID','Other_Sale_Id'],\n\tformat: 'table',\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tAsset_ID,\n\t\tFund_ID,\n\t\tOther_Sale_Id,\n\t\tReporting_Period,\n\t\tSale_Type_Code,\n\t\tSales_UOM,\n\t\tSales_Point,\n\t\tTotal_Units_Sold,\n\t\tSales_revenue,\n\t\tSales_Cost,\n\t\tSales_Net_Revenue,\n\t\tSales_Net_Revenue_Per_Unit,\n\t\tCurrency_Code,\n\t\tBudget_Sales_Quantity,\n\t\tBudget_Sales_Revenue,\n\t\tBudget_Sales_Cost,\n\t\tInsert_Datetime = insert_datetime,\n\t\tUpdate_Datetime = update_datetime,\n\t\tProcess_Name = process_name,\n\t\tSales_Type\n\t)) ~> UpserttRow"
		}
	}
}